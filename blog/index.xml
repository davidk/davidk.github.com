<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on open collector</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blogs on open collector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Electroscope update</title>
      <link>http://localhost:1313/blog/2015-02-10-electroscope-update/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2015-02-10-electroscope-update/</guid>
      <description>

&lt;p&gt;The 9V attachable electroscope has been updated. The silkscreened date on the
back for this version is 2014-08-24(!)&lt;/p&gt;

&lt;h3 id=&#34;changes:7dde062d6c6ca61db731fda7916bef40&#34;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pulled copper pour near inputs back&lt;/li&gt;
&lt;li&gt;Removed polyimide/kapton shield&lt;/li&gt;
&lt;li&gt;Simplified antennae construction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One slight quirk with nearly all of these electroscopes is that they appear
to be hard &amp;lsquo;on&amp;rsquo; after assembly sometimes. In many cases i&amp;rsquo;ve found that this is
due to residual flux (of the water washable type).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve had success by scrubbing down with isopropyl alcohol and reflowing
again with hot air.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/electroscope/electroscope_08_24.png&#34; alt=&#34;Updated electroscope&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;fabrication:7dde062d6c6ca61db731fda7916bef40&#34;&gt;Fabrication&lt;/h3&gt;

&lt;p&gt;You can find the necessary sources, gerbers, and files &lt;a href=&#34;https://github.com/davidk/electroscope&#34;&gt;here&lt;/a&gt;. The BOM is identical to the older version.&lt;/p&gt;

&lt;p&gt;The OSHPark shared project for direct fabrication can be found &lt;a href=&#34;https://oshpark.com/shared_projects/x89XVFQf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CR2032 tester</title>
      <link>http://localhost:1313/blog/2014-06-29-cr2032-tester-released/</link>
      <pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014-06-29-cr2032-tester-released/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/davidk/cr2032-tester/master/pictures/front.png&#34; alt=&#34;CR2032 tester&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I was able to release a small breakout board based on a sample I received long ago from Texas Instruments.
It is a CR2032 tester, based on the pretty accurate TPS3809L30DBVR part (which was derived
from eevblog&amp;rsquo;s ÂµCurrent). The LED stops lighting up somewhere slightly at or below 2.64v, where most CR2032 coin cells enter
end-of-life on the discharge curve.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/davidk/cr2032-tester&#34;&gt;Read more and get it made on the project page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Toy Electroscope</title>
      <link>http://localhost:1313/blog/2014-05-30-electroscope/</link>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014-05-30-electroscope/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/electroscope/top-old-ver-kapton.png&#34; alt=&#34;Kaptonized&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Nearly a year ago, vk2zay posted a &lt;a href=&#34;http://www.youtube.com/watch?v=1DR-tTU8uIM&#34;&gt;video on electrets&lt;/a&gt;. In it, he also shared
a design for a &lt;a href=&#34;http://www.youtube.com/watch?v=1DR-tTU8uIM#t=152&#34;&gt;pretty fun electroscope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a part of learning KiCAD earlier this year, I turned it into a PCB.&lt;/p&gt;

&lt;p&gt;This is the latest result:
&lt;img src=&#34;http://localhost:1313/assets/images/electroscope/top2.png&#34; alt=&#34;Electroscope&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The exposed copper area accepts a combination of kapton+sticky copper tape+kapton for some rudimentary shielding. LEDs are 3mm, or
0805 (imperial). The antennae are simply stripped breadboarding wire.&lt;/p&gt;

&lt;p&gt;It triggers on things I would have never expected.. like the clear plastic bags some components come in (from a
very popular electronics vendor in the middle of nowhere). With the right LEDs (non-diffused/surface mount), people shuffling by light it up,
and many are curious enough to pick it up and play with it/ask questions.&lt;/p&gt;

&lt;p&gt;You can get your own copy of the PCB through the &lt;a href=&#34;https://www.oshpark.com/shared_projects/KFA2jmSs&#34;&gt;OSHPark shared project page&lt;/a&gt;, or grab the source
KiCAD files/Bill of Materials/Placement &lt;a href=&#34;https://github.com/davidk/electroscope&#34;&gt;here&lt;/a&gt;. If you want the Gerbers used in fabrication, OSHPark has started
exposing those as well, &lt;a href=&#34;http://uploads.oshpark.com/uploads/project/design/KFA2jmSs/design.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avrrrinator B Released</title>
      <link>http://localhost:1313/blog/2014-05-19-avrrrinator-b-released/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014-05-19-avrrrinator-b-released/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/avrb/images/avrrrinator_b_top_cables.png&#34; alt=&#34;avrrrinator rev b&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Bus Pirate 3 -&amp;gt; 2x AVR (ISP) adapter!&lt;/p&gt;

&lt;p&gt;This is a really short post since the actual pages have more information. However, Avrrrinator B is now out the
door. While my personal use cases have been quite limited (burning bootloaders for Arduinos, flashing blink programs/not
learning my lesson with RSTDISBL), hopefully someone will find a bit of utility with this breakout.&lt;/p&gt;

&lt;h3 id=&#34;for-more-information:62a29b9cec1fd322dd17ad6f628a4365&#34;&gt;For more information:&lt;/h3&gt;

&lt;p&gt;The Eagle source/Bill of Materials can be located &lt;a href=&#34;https://github.com/davidk/avrrrinator/tree/master/hardware/revB&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The long form blog posting is &lt;a href=&#34;http://open.konspyre.org/avrb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Panasonic PIR Breakout Board</title>
      <link>http://localhost:1313/blog/2014-05-02-panasonic-breakout-board/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014-05-02-panasonic-breakout-board/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/panapir/top_side_white_pir.png&#34; alt=&#34;panapir&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working on some motion sensing stuff and stumbled across Panasonic&amp;rsquo;s PIR sensors. They&amp;rsquo;re not raw sensors, but come as a mostly all in one TO-5 package.&lt;/p&gt;

&lt;p&gt;Since the package has slender, non-breadboard friendly pins, working with it was quite unwieldy, and required alligator clips (which got tied up in knots, required careful positioning, etc).&lt;/p&gt;

&lt;p&gt;So here is a &lt;a href=&#34;https://github.com/davidk/PanaPIR&#34;&gt;tested breakout board for the Panasonic PIR sensors&lt;/a&gt;. All the good bits of information (which sensors have been tested, vendor links, etc) are in the repository&amp;rsquo;s README (just scroll down).&lt;/p&gt;

&lt;p&gt;If you prefer to use OSHPark&amp;rsquo;s fabrication services for purpleization, a link is included to a shared project. All you need to do is to click order.&lt;/p&gt;

&lt;p&gt;cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avrrrinator Rev. A Updated</title>
      <link>http://localhost:1313/blog/2014-03-10-avrrrinator-rev-a-updated/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014-03-10-avrrrinator-rev-a-updated/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/avra/images/avrrinator-a2-bp.png&#34; alt=&#34;avra&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;A mostly visual update to Avrrrinator Rev. A has been pushed to its &lt;a href=&#34;https://github.com/davidk/avrrrinator&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There isn&amp;rsquo;t much to update with a straight Bus Pirate (3) to AVR ISP breakout, so the changes are mostly visual. A new BOM part now allows mating directly to the Bus Pirate 3, so check that out too.&lt;/p&gt;

&lt;p&gt;As before, you can do as you like with this board under the CC0 Public Domain license.&lt;/p&gt;

&lt;p&gt;cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop, blink and roll*</title>
      <link>http://localhost:1313/blog/2013-05-13-stop-blink-roll/</link>
      <pubDate>Mon, 13 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013-05-13-stop-blink-roll/</guid>
      <description>

&lt;p&gt;A little bit of the cat got out of the bag some time ago:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/avrrrinator/6-seconds-avrrrinator.gif&#34; alt=&#34;6 seconds of AVR flashing&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re looking at ~24 hours of continuous AVR flashing compressed down into 6 seconds.&lt;/p&gt;

&lt;p&gt;While I won&amp;rsquo;t be releasing the connecting PCB just yet (i&amp;rsquo;m still beating down a few issues and refining the BOM), I thought it would be good to supply the scripts I used to do the actual time lapse since it was non-obvious from a &amp;ldquo;oh dear, the contest entry is due in &amp;lt;48 hours isn&amp;rsquo;t it..&amp;rdquo; point of view.&lt;/p&gt;

&lt;h2 id=&#34;parts-and-materials:c434917f357788de682d8fe989da3bc9&#34;&gt;Parts and Materials&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Teensy3&lt;/strong&gt;:  Attached to the system doing the programming&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSD1306&lt;/strong&gt;: OLED display showing how many times the AVR has been programmed&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bus Pirate 3&lt;/strong&gt;: Acting as an AVR programmer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avrrrinator Rev B&lt;/strong&gt;: Bus Pirate to 2x AVR ISP adapter (this is the super secret &amp;ldquo;prototype&amp;rdquo; I mentioned in the &lt;a href=&#34;http://www.youtube.com/watch?v=1nvUlqp4ISU&#34;&gt;YouTube post&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;BB313 boards&lt;/strong&gt;: Breakouts for easily attaching AVR ISP cables&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ATtiny4313&lt;/strong&gt;: tiny AVR for programming&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ATtiny85&lt;/strong&gt;: tiny AVR for programming&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Assorted LEDs&lt;/strong&gt;: Status indicators/Lighting&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Logitech C920 Webcam&lt;/strong&gt;: Takes all the pictures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;taking-a-picture:c434917f357788de682d8fe989da3bc9&#34;&gt;Taking a picture&lt;/h2&gt;

&lt;p&gt;The small bash script invoking the gstreamer toolchain (without reading the documentation this is pretty much magic) took on the duty of taking a picture every minute. It then copied everything out via rsync to another machine with tons of spare space.&lt;/p&gt;

&lt;p&gt;This is not properly done since my start time edged uncomfortably close to when I had to stop, edit and ship (24 hours later).&lt;/p&gt;

&lt;p&gt;Note that this constantly writes over the same file. It stops the local disk from being clogged up by continuous snapshots. It also does not check and do anything reasonable if the rsync transfer fails.. like move the file aside/retry.&lt;/p&gt;

&lt;p&gt;In my case, losing a few minutes worth of snapshots wasn&amp;rsquo;t a big deal for 24 hours compressed down to 6 seconds. I actually deleted quite a few frames before rendering out to video to eliminate periods of darkness (they show up as jarring sub-millisecond transitions to darkness).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

while true; do
gst-launch -e v4l2src ! video/x-raw-yuv,format=\(fourcc\)YUY2,width=1920,height=1080,framerate=5/1 \
! ffmpegcolorspace ! pngenc snapshot=true ! filesink location=&amp;quot;frame.png&amp;quot;

# Yup, this is talking to an actual rsyncd daemon on a NAS
RSYNC_PASSWORD=&amp;quot;super_secret&amp;quot; rsync -avP frame.png rsync://rsync@storage.somewhere/frame-`date &#39;+%s&#39;`.png

sleep 60;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;video-out:c434917f357788de682d8fe989da3bc9&#34;&gt;Video out&lt;/h2&gt;

&lt;p&gt;After all the frames were assembled, I manually went in and pruned a bunch that were completely dark due to the lights being off. Compressing the video down a bunch to 6 seconds took a bit of playing around, mostly with the framerate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mencoder &#39;mf://*.png&#39; -mf fps=145:type=png -ovc lavc -lavcopts vcodec=mpeg4:mbd=2:trell -oac copy -o ~/Desktop/output-yt.avi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the video quality kind of sucked, but I had to ship it.&lt;/p&gt;

&lt;p&gt;Here is the completed video:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/1nvUlqp4ISU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;code-doing-the-programming:c434917f357788de682d8fe989da3bc9&#34;&gt;Code doing the programming&lt;/h2&gt;

&lt;p&gt;This is the script that refreshes the display you see. It calls &lt;code&gt;avrdude&lt;/code&gt; to flash the AVRs and records the return code.&lt;/p&gt;

&lt;p&gt;If it is zero, then the success counter for the AVR is incremented.&lt;/p&gt;

&lt;p&gt;From there counts are then written to the serial port where the Teensy 3 can handle persisting the display and refreshing it with new results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# requires pyserial (pip install pyserial)
import subprocess
import serial

counter_4313 = 0
counter_85 = 0

failures_4313 = 0
failures_85 = 0

ser_port = serial.Serial(port=&#39;/dev/tty.usbmodem12341&#39;, baudrate=9600)

while True:
    try:
        ret_4313 = subprocess.check_call([&#39;avrdude&#39;, &#39;-v&#39;, &#39;-p&#39;, &#39;attiny4313&#39;, &#39;-c&#39;, &#39;buspirate&#39;, &#39;-P&#39;,
        &#39;/dev/tty.usbserial-AE01J4Q7&#39;, &#39;-U&#39;, &#39;flash:w:blinky313.hex&#39;, &#39;-x&#39;, &#39;reset=aux&#39;])
    except subprocess.CalledProcessError:
        ret_4313 = 1

    if ret_4313 == 0:
        print &amp;quot;ATtiny4313&amp;quot;
        counter_4313 += 1
    else:
        failures_4313 += 1

   # Report statistics to the LCD screen
    report = &amp;quot;313:%s\n\n85:%s&amp;quot; % (counter_4313, counter_85)
    ser_port.write(report)
    try:
        ret_85 = subprocess.check_call([&#39;avrdude&#39;, &#39;-v&#39;, &#39;-p&#39;, &#39;attiny85&#39;, &#39;-c&#39;, &#39;buspirate&#39;, &#39;-P&#39;,
        &#39;/dev/tty.usbserial-AE01J4Q7&#39;, &#39;-U&#39;, &#39;flash:w:blinky45.hex&#39;, &#39;-x&#39;, &#39;reset=cs&#39;])
    except subprocess.CalledProcessError:
        ret_85 = 1

    if ret_85 == 0:
        print &amp;quot;ATtiny85&amp;quot;
        counter_85 += 1
    else:
        failures_85 += 1

   # We do this twice to make it look more live
    report = &amp;quot;313:%s\n\n85:%s&amp;quot; % (counter_4313, counter_85)
    ser_port.write(report)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the Teensy 3, the data is received and pumped out to the display. Not the greatest code, but decent enough to run for 24 hours without much of a hiccup.&lt;/p&gt;

&lt;p&gt;Note that there are several small issues when using the SSD1306 library with the Teensy 3. I just stomped out the relevant sections after chasing down errors from the compiler (which were unrelated to SPI operation, and mostly due to i2c support).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-arduino&#34;&gt;/*********************************************************************
* Flash Counter!
* Teensy 3.0 attached to a 128x64 SPI-driven OLED display
* Vendor: Adafruit
*
* IF YOU GET COMPILE ERRORS (you likely will!)
* Stomp out the compile errors in Adafruit_SSD1306.cpp line by line
* and everything should be OK (most of them are i2c related).
*
*********************************************************************/
#include &amp;lt;Wire.h&amp;gt;
#include &amp;lt;Adafruit_GFX.h&amp;gt;
#include &amp;lt;Adafruit_SSD1306.h&amp;gt;

#define OLED_DC 11      // All pin numbers correspond to
#define OLED_CS 10  // the &#39;gray&#39; labels on the welcome to
#define OLED_CLK 14     // Teensy 3 card
#define OLED_MOSI 12    // SSD1306 labels this as: &amp;quot;Data&amp;quot;
#define OLED_RESET 9

Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

void setup() {
  Serial.begin(9600);
  pinMode(13, OUTPUT);

  // Display setup
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.setTextColor(WHITE,BLACK);

}

void loop() {

  // Persist the display until we have something to display
  if( Serial.available() &amp;gt; 0 ) {
    display.clearDisplay();
  }
  display.println(&amp;quot;AVR Program Count&amp;quot;);
  display.println();
  display.setTextSize(2);
  while ( Serial.available() &amp;gt; 0 ) {
    digitalWrite(13, HIGH);
    char c = Serial.read();

    if (c == &#39;\n&#39;) {
      display.println();
    } else {
      display.write(c);
    }
    digitalWrite(13, LOW);
  }
  display.display();

  delay(500);
  display.setTextSize(1);
  display.setCursor(0,0);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course, blink programs. The ATtiny4313 and &lt;a href=&#34;https://gist.github.com/davidk/4555334&#34;&gt;ATtiny85&lt;/a&gt; each had their own. They&amp;rsquo;re pretty generic, (the one for the 4313 is from the BB313 website).&lt;/p&gt;

&lt;p&gt;cheers (and drink, if thats your thing)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware Volume Controller</title>
      <link>http://localhost:1313/blog/2013-05-11-hardware-volume-controller/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013-05-11-hardware-volume-controller/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(5/11/13) - Hey fantastic reader: This is an old how-to (from 4/2/12!) that existed in its own self-contained repository. Reflecting back, this hack was kind of silly, but i&amp;rsquo;m porting it here to keep everything in one place.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And if you&amp;rsquo;re curious about the long-term viability of this build.. it is still kicking. The detents are a little less crisp now, but everything works a treat. (And now, back to your regularly scheduled post re-run!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t too long ago that volume control on a keyboard was a foreign concept. After it became a &amp;lsquo;feature&amp;rsquo;, that control seemed pretty normal. There is however, a slight modern exception now. Many mechanical keyboards (which have been coming back into style) don&amp;rsquo;t have them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/volcontrol/overview.png&#34; alt=&#34;overview&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;In response, I hacked this together. It&amp;rsquo;s a volume controller which parses a rotary encoder&amp;rsquo;s input
and controls the volume (tested on OS X/Windows/Linux so far).&lt;/p&gt;

&lt;h3 id=&#34;parts-bill-of-materials:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Parts/Bill of Materials:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/16&#34;&gt;Altoids Gum sized tin&lt;/a&gt; - A slick enclosure. Scratches easily though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/377&#34;&gt;Rotary Encoder&lt;/a&gt; - I&amp;rsquo;ve tried a bunch. A lot of them either failed over time, or the &amp;lsquo;clicks&amp;rsquo; (detents) became mushy. This one comes with a cool looking knob and is panel mountable too.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/296&#34;&gt;Adafruit Atmega32u4 Breakout&lt;/a&gt; - Brains of the operation. Comes with headers. For this particular project, just keep the headers for a rainy day.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wire - Will need these to hook up the rotary encoder. Stranded wire is preferable since it can bend and flex.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perfboard - While you can go without, the perfboard is nice to relieve the stress on the rotary encoder pins. I haven&amp;rsquo;t run across an economical source of cuttable copper-clad perf; they&amp;rsquo;re usually so large that I feel guilty slicing them apart. &lt;a href=&#34;https://www.adafruit.com/products/589&#34;&gt;These&lt;/a&gt; seem to be the right size, but are rather thick (I haven&amp;rsquo;t sliced these apart yet). Use anything that works.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optional (or you already have these if you&amp;rsquo;re thinking this is a good weekend project):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/436&#34;&gt;Sugru&lt;/a&gt; - I used this stuff to attach the board to the tin. Anything non-conductive works (determine the amount of adhesion based on your projected re-use of these parts).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Soldering iron + Solder - Needed to join all the parts together.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mini-B USB cable - This is the cable type that the breakout board accepts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drill/set of bits - To make a hole so that the encoder can poke out of.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Something to cut with - For perfboard cutting, wire stripping, prying the enclosure, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;electronics-assembly:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Electronics assembly&lt;/h3&gt;

&lt;p&gt;Start by cutting perf for the rotary encoder. Put on your safety glasses (and quite possibly a dust mask just to be extra cautious). Cutting perfboard (and other things too!) can cause pieces of it to fly into your eyeballs.&lt;/p&gt;

&lt;p&gt;To cut the perfboard by hand, score 5-7 times along the holes that mark the edges of the cut (make sure to dry fit before cutting). I had better cuts by scoring along the entire length of the perf (although this means some perf ends up being wasted).&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re ready to cut, take a pair of shears (dull diagonal cutters work too) and clip a notch where your scored lines meet the edges. This should serve as a guide for your snap (the concept is similar to tearing a notch in a piece of folded paper before ripping it apart cleanly). Slowly bend the perf where the score is and the perf should snap apart. If it resists or seems like it won&amp;rsquo;t snap along the score line, score some more and repeat.&lt;/p&gt;

&lt;p&gt;If that fails, break out a dust mask, a pair of safety glasses (you should already be wearing these!), and just start hacksawing. It won&amp;rsquo;t be very pretty, but it should work.&lt;/p&gt;

&lt;p&gt;The next step is to solder the encoder in. Insert the encoder and tack a leg with solder to hold it in place. Ensure everything is aligned the way you like it (check that there is room for the wiring below), and solder the rest of the pins in.&lt;/p&gt;

&lt;p&gt;The wiring can be deceptively tricky. Measure out enough wire so that you can open/close the box. Cut, strip and tin the wires. You&amp;rsquo;ll need 5 wires.&lt;/p&gt;

&lt;p&gt;Here is the wire mapping (looking from top to down at the rotary encoder, with three pins on top and two on the bottom):&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;volume-up-down-three-pins-top:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Volume Up/Down (three pins, top)&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;em&gt;Wire color&lt;/em&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;em&gt;Pin on Atmega32u4&lt;/em&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;em&gt;Pin on encoder&lt;/em&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;White&lt;/td&gt;
&lt;td&gt;D0&lt;/td&gt;
&lt;td&gt;Left-most pin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;Middle pin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Red&lt;/td&gt;
&lt;td&gt;D1&lt;/td&gt;
&lt;td&gt;Right-most pin&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;mute-on-off-two-pins-bottom:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Mute On/Off (two pins, bottom)&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;&lt;em&gt;Wire color&lt;/em&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;em&gt;Pin on Atmega32u4&lt;/em&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&lt;em&gt;Pin on encoder&lt;/em&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;Left-most pin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;White&lt;/td&gt;
&lt;td&gt;B0&lt;/td&gt;
&lt;td&gt;Right-most pin&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Solder all the wires together. Once the wires are attached to the perf, blob some solder to bridge the wiring and the encoder pins together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/volcontrol/encoderwiring.png&#34; alt=&#34;encoder wiring&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;enclosure:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Enclosure&lt;/h3&gt;

&lt;p&gt;To drill a hole for the encoder, find a bit size that matches (the datasheet says it is 6mm / .236 inches or just around a &lt;sup&gt;15&lt;/sup&gt;&amp;frasl;&lt;sub&gt;64&lt;/sub&gt; drill bit (.234 inches)). Measure for dead center on both axes (or like a professor once told me: &amp;lsquo;eyeball it until your OCD stops&amp;rsquo;). Mark the drill point.&lt;/p&gt;

&lt;p&gt;If it makes it easier, it is possible to remove the lid from the body. Simply bend the hinged tabs outward and the lid will slide off. Reverse to fit the lid back on.&lt;/p&gt;

&lt;p&gt;You may need to brace the back of the drill area with a block of scrap wood to prevent warping. Drill from the outside in (so that all the unsightly edges are hidden somewhat). Don&amp;rsquo;t apply too much pressure (you won&amp;rsquo;t be able to undent things easily).&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re done, dry fit the encoder but don&amp;rsquo;t screw it into place yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/volcontrol/enclosure.png&#34; alt=&#34;enclosure&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;For the USB port, buttress the breakout board against the bottom of the enclosure and mark an approximate outline. Using a drill, begin drilling into the case (the hole won&amp;rsquo;t be large enough, but we&amp;rsquo;ll fix that in a bit). With the hole made, take your shears and carefully pry to make an opening wide enough for the USB plug to poke out. Continue to check the fit while slowly prying. Don&amp;rsquo;t worry if it looks too ugly. The USB plug covers up most of the mess.&lt;/p&gt;

&lt;h3 id=&#34;final-assembly:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Final assembly&lt;/h3&gt;

&lt;p&gt;Before adhering the breakout board (permanently, depending on your preference); lets test everything.&lt;/p&gt;

&lt;p&gt;Compiling:&lt;/p&gt;

&lt;p&gt;Unfortunately I haven&amp;rsquo;t had all that much luck compiling on OS X (using Homebrew packages), and I haven&amp;rsquo;t tried on Windows at all. Only Linux has worked so far. All hope is not lost however, you can manually program the breakout with avrdude! Read on to &amp;lsquo;Skipping all of that&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;These are the packages I have installed for Fedora which are needed to compile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum -y install avr-libc avrdude avr-gcc avr-binutils git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, grab a copy of the LUFA git repository that includes the necessary modifications:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git://github.com/davidk/lufa-lib.git
$ cd lufa-lib
$ git checkout -b atmega32u4-mediacontroller origin/atmega32u4-mediacontroller
$ cd trunk/Projects/MediaController
$ make all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the compile was successful, connect the breakout board to your computer. Type the following into your console,
hit enter, but don&amp;rsquo;t type in your password yet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo make program
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Going back to the breakout board, hit the white button (a green light should slowly start fading in and out indicating that the breakout is ready to be programmed). Type in your password and watch it go. If avrdude had
problems finding your 32u4 breakout, run &lt;code&gt;dmesg&lt;/code&gt; and check the output for something along the lines of &lt;code&gt;ttyACM&lt;/code&gt;. The last part should be a number. Modify the &lt;code&gt;makefile&lt;/code&gt; with the new port and re-run the line.&lt;/p&gt;

&lt;p&gt;Here is what my dmesg looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/volcontrol/dmesg.png&#34; alt=&#34;dmesg&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Skipping all of that:&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re on OS X or Windows.. or just don&amp;rsquo;t like compiling, get the &lt;a href=&#34;http://localhost:1313/assets/code/volcontrol/MediaController.hex&#34;&gt;hex file&lt;/a&gt;, press the white bootloader button, and run the following (a working example for OS X):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ avrdude -p atmega32u4 -P /dev/tty.usbmodem621 -c avr109 -U flash:w:MediaController.hex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change &lt;code&gt;/dev/tty.usbmodem621&lt;/code&gt; as appropriate for your platform. On OS X, if at first /dev/tty.usbmodem612 doesn&amp;rsquo;t work, use tab-completion to fill in the remaining section. Enter &lt;code&gt;/dev/tty.usb&lt;/code&gt; and tap tab to get relevant entries when the bootloader light is active.&lt;/p&gt;

&lt;p&gt;Finishing up:
Do volume up/down and mute (pushing down on the encoder) work properly? If so, time to finish up! If not, make sure
that the board is programmed (it shows up as &lt;code&gt;LUFA Media Controller&lt;/code&gt; in &lt;code&gt;dmesg&lt;/code&gt;, and similarly under the OS X System Profiler). Also ensure the connections between all the parts are nice and solid.&lt;/p&gt;

&lt;p&gt;If everything is finished, open a pack of Sugru (or the adhesive you&amp;rsquo;re using), and stick things together.
Next, poke the rotary encoder through the hole on the lid. Then secure it with the hardware provided and add the nice looking control knob to top it off.&lt;/p&gt;

&lt;p&gt;Here is what mine looks like now; it is magnetically attached to the keyboard (no ill effects yet).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/volcontrol/completed.png&#34; alt=&#34;completed&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;attributions:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Attributions:&lt;/h3&gt;

&lt;p&gt;This project uses code and examples provided by LUFA (which is MIT licensed). Thats by Dean Camera.
The code to read the rotary code comes from a posting by circuitsathome &lt;a href=&#34;http://www.circuitsathome.com/mcu/reading-rotary-encoder-on-arduino&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;improvements-chaos-and-cost-reductions:a8f7eabc62bf84464c72c579bacd87aa&#34;&gt;Improvements, chaos, and cost reductions:&lt;/h3&gt;

&lt;p&gt;From a performance and cost perspective, the breakout used for this project is overkill; building an ATTiny breakout might be more worthwhile. Also,
it might be possible to just rip the guts out of an old keyboard and use its media controller functions with some
modding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools for 3D Printing: What do I get?</title>
      <link>http://localhost:1313/blog/2013-04-07-tools-for-3d-printing/</link>
      <pubDate>Sun, 07 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013-04-07-tools-for-3d-printing/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/3dprinting/pocket-level-x-bridge.png&#34; alt=&#34;Pocket level&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;A pocket level ensures things are reasonably level before further calibration and fine tuning&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are few of the things i&amp;rsquo;ve used/and bought over the past few months while owning a 3D printer. If you&amp;rsquo;re new to the 3D printing world (and making, in general), collecting and/or using some of these will make your life easier.&lt;/p&gt;

&lt;p&gt;These are the basics, so you may be able to borrow these from a (friendly) maker and/or tinkerer.&lt;/p&gt;

&lt;h3 id=&#34;thread-locking-fluid:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Thread-locking fluid&lt;/h3&gt;

&lt;p&gt;In the first few &lt;del&gt;months&lt;/del&gt; weeks of owning my 3D printer, I made the mistake of assembling my printer without thread-locking fluid. Of course, bolts and screws fell off during long prints causing incalculable amounts of wasted time and filament.&lt;/p&gt;

&lt;p&gt;Thread locker (or the stuff by its popular brand name: &lt;strong&gt;&lt;em&gt;Loctite&lt;/em&gt;&lt;/strong&gt;) keeps a bolt from freeing itself (usually via vibration forces), while allowing it to be removed by hand if needed.&lt;/p&gt;

&lt;p&gt;Adding loctite is best done during a printer build. If certain parts are constantly coming loose, working it in as needed will do too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Part #: 91458A115  (McMaster-Carr, Loctite 243, Blue)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;stuff-to-make-things-move:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Stuff to make things move&lt;/h3&gt;

&lt;p&gt;For squeaks, metal on metal noises, or just for things that move and make contact, adding a few drops of lubricant is occasionally needed to keep things in good form.&lt;/p&gt;

&lt;p&gt;Some printing guides prefer sprays (especially on vertical areas like Z-axis rods). For several months i&amp;rsquo;ve been using a liquid lubricant, which contains PTFE (without issue so far). I didn&amp;rsquo;t intend to use it for my printer, but it ended up working quite well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Part #: 1155K33 (McMaster-Carr). You get a lot for about $5 (not including shipping of course).&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;pocket-level:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Pocket level&lt;/h3&gt;

&lt;p&gt;On my particular printer, there is the potential for a lot of things to go out of alignment (either due to stresses at rest, or operator error). A small level is great for getting things into a general ball park for further fine tuning.&lt;/p&gt;

&lt;p&gt;The Stabila Pocket Level ($10) is magnetic (the magnetized area isn&amp;rsquo;t obvious, but it is on the bottom). It also has a very clear window for viewing the bubble, and is slightly more fluid than some of the other bubble levels I have on hand.&lt;/p&gt;

&lt;p&gt;While it is a bit expensive for a smaller level (slightly larger levels like torpedo levels are well within or below its price), this is a pretty good quality level that seems like it will last.&lt;/p&gt;

&lt;p&gt;It will also (unlike torpedo levels) fit into areas with very little clearance.&lt;/p&gt;

&lt;p&gt;What does it look like? Scroll up a bit. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Part #: &lt;a href=&#34;http://amzn.com/B0012N368M&#34;&gt;Stabila 11990 Pocket Level&lt;/a&gt; - (Amazon)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;cable-zip-ties:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Cable/zip ties&lt;/h3&gt;

&lt;p&gt;If your printer looks anything like mine, nearly everything (including the pullies and even some of the linear bearings) are held together by these ties. And sometimes readjusting things means cutting those ties.&lt;/p&gt;

&lt;p&gt;For a few bucks you can stop cursing while trying to find a replacement tie.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Part #: 7130K41 (McMaster-Carr). These are the smaller &amp;lsquo;micro&amp;rsquo; zip ties, and come in a large enough pack to stave off regret at the amount of zip tie waste you&amp;rsquo;re bound to generate.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;long-screwdriver-racheting-driver:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Long screwdriver/racheting driver&lt;/h3&gt;

&lt;p&gt;Who doesn&amp;rsquo;t have a screwdriver? (Answer: A person who needs one right now.)&lt;/p&gt;

&lt;p&gt;A ratcheting driver makes a surprising difference on a printer.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been quite happy with a Stanley Ratcheting Screwdriver ($10). The shortened turn in ratchet mode is great when working in tight spaces (where it is hard/annoying to do &amp;ldquo;full&amp;rdquo; turns).&lt;/p&gt;

&lt;p&gt;This particular driver comes with several extra bits hidden in the endcap and has the ability to become a normal/fixed screwdriver with a twist of the knob.&lt;/p&gt;

&lt;p&gt;Normal screwdrivers are more than enough though, and this is really just optional.&lt;/p&gt;

&lt;p&gt;*** Part #: &lt;a href=&#34;http://www.amazon.com/Stanley-69-189-Ratcheting-Multi-Bit-Screwdriver/dp/B002I3TDP0/&#34;&gt;Stanley 69-189 Ratcheting Multi-Bit Screwdriver&lt;/a&gt; - (Amazon)***&lt;/p&gt;

&lt;h2 id=&#34;other-accessories:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Other accessories&lt;/h2&gt;

&lt;p&gt;These are parts that I have no specific recommendation for, but once you have them you may wonder what you did without them!&lt;/p&gt;

&lt;h3 id=&#34;straight-tweezers:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Straight tweezers&lt;/h3&gt;

&lt;p&gt;At working temperatures, the extruder gets really hot. And print beds do as well. To save yourself from getting actual 3D printing battle scars, get a pair of tweezers to pluck out stray strands of filament.&lt;/p&gt;

&lt;p&gt;During warm up, just use the tweezers to pluck at the extruder, or to scrape off a small starting failure/error from the bed that has failed to adhere.&lt;/p&gt;

&lt;p&gt;It is likely that you wouldn&amp;rsquo;t want to use an ESD-style tweezer (they&amp;rsquo;re often colored black with a matte finish). Mostly this is because some of them have a lightly applied coating that scratches easily. Save the ESD tweezers for sensitive electronics work.&lt;/p&gt;

&lt;h3 id=&#34;flush-cutters:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Flush cutters&lt;/h3&gt;

&lt;p&gt;Cutting filament is kind of an afterthought, but it needs to be done (usually when loading and unloading new/used filament). A pair of throwaway flush cutters will make doing so quick and easy.&lt;/p&gt;

&lt;p&gt;It probably isn&amp;rsquo;t a good idea to use new or flush cutters you love. Certain plastics like PLA are fairly hard, which may cause faster wear and tear on cutters. Then again, decent cutters can be had for a good price nowadays (Xcelite cutters are pretty decent! Mouser Part #: 578-175M).&lt;/p&gt;

&lt;h3 id=&#34;detachable-reusable-spool:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Detachable/Reusable spool&lt;/h3&gt;

&lt;p&gt;Using filament freestyle without any sort of management is a recipe for disaster over time. &lt;em&gt;Many&lt;/em&gt; of my early troubles were due to buying spool-less, (but wound filament) and trying to wing it without a spool.&lt;/p&gt;

&lt;p&gt;If I went to sleep, got a drink or otherwise looked away for a bit, the filament would somehow find a way to tangle, feed incorrectly, or do nasty things like snap (after tensing up due to tangling).&lt;/p&gt;

&lt;p&gt;After resorting to hacks, (like turning the filament bag itself into a spool holder), I got kind of fed up and decided to just get a reusable spool.&lt;/p&gt;

&lt;p&gt;A decent one for small quantities (1 lb, or 454 grams for everyone else), consists of a spool that can have the side detached (usually via screws) and filament loaded in.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found that the filament doesn&amp;rsquo;t necessarily have to be completely flush with the hub for small quantities (perhaps &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; a pound or less), just &amp;lsquo;enclosed&amp;rsquo; by the spool walls.&lt;/p&gt;

&lt;p&gt;Some good features to look out for are pre-drilled holes to put the filament ends into, and a standard diameter/width size (if you&amp;rsquo;ll be using multiple spools with a particular spool feeding system/holder).&lt;/p&gt;

&lt;p&gt;For most spool setups, they should be mounted on some sort of holder where the filament can be pulled into the extruder smoothly (and consistently).&lt;/p&gt;

&lt;h3 id=&#34;spool-holder:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Spool holder&lt;/h3&gt;

&lt;p&gt;There are plenty of &lt;a href=&#34;http://www.thingiverse.com/thing:52558&#34;&gt;examples on Thingiverse&lt;/a&gt; of spool holders. Some can be purchased for $8 and some can be made out of PVC pipe. Don&amp;rsquo;t forgo this for too long, as it is a pretty good addition to your printing kit if it isn&amp;rsquo;t already built-in to your printer.&lt;/p&gt;

&lt;h3 id=&#34;tongue-and-groove-pliers:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Tongue-and-Groove Pliers&lt;/h3&gt;

&lt;p&gt;Otherwise known as Channellocks (which is also the name of the company that created them), these pliers are pretty great to have around, either to remove a print with brute force (if necessary, and if your print allows for it), or for tightening things.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have these already, they can be cheaply had at many stores (McMaster-Carr also sells them), and are useful for other things around your home as well.&lt;/p&gt;

&lt;h3 id=&#34;calipers:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Calipers&lt;/h3&gt;

&lt;p&gt;This is usually required by every &amp;ldquo;Welcome to your brand new 3D printer!&amp;rdquo; guide. You&amp;rsquo;ll need one to calibrate things like extrusion amounts (when loading new filament) and to bring physical objects into CAD for printing.&lt;/p&gt;

&lt;p&gt;Be sure to do extra research on the different types of calipers out there, as quality can vary a lot between types (veiner vs digital) and brands (Mitutoyo vs dollar store type).&lt;/p&gt;

&lt;h3 id=&#34;blue-painter-s-tape:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Blue Painter&amp;rsquo;s Tape&lt;/h3&gt;

&lt;p&gt;A spool of something like &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;&amp;rdquo; 3M Blue Painters&amp;rsquo; Tape will work very well as a surface for your PLA print to adhere to (as long as the first few layers are pressed down into the tape proper). The larger width also makes resurfacing fairly easy.&lt;/p&gt;

&lt;p&gt;(ABS users will want to look into Kapton/Polyimide tape or squares)&lt;/p&gt;

&lt;p&gt;Best of luck in your printing adventures!&lt;/p&gt;

&lt;p&gt;cheers&lt;/p&gt;

&lt;h2 id=&#34;errata-changes:a7a6f00eceb9f81ba78c566e527b0395&#34;&gt;Errata / Changes&lt;/h2&gt;

&lt;p&gt;05/09/13: Clarifications and basic fixes&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Printable divider for the 10164 storage drawer</title>
      <link>http://localhost:1313/blog/2013-02-04-printable-divider/</link>
      <pubDate>Mon, 04 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013-02-04-printable-divider/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/box_divider/box_divider_plate.png&#34; alt=&#34;Storage drawer divider&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;This is a 3D printable small drawer divider for the Akro-Mils 10164 parts cabinet.&lt;/p&gt;

&lt;p&gt;The clear drawers themselves have a nice little slot for partitioning, so this divider fits right in and sits snugly without bowing out the drawer.&lt;/p&gt;

&lt;p&gt;While there are several dividers that come attached to the back of the cabinet (which are manually de-paneled by the end consumer), they&amp;rsquo;re very limited in quantity.&lt;/p&gt;

&lt;p&gt;So if you have a 3D printer of some sort, or want to play with the model enough to make it &amp;lsquo;go&amp;rsquo; on a laser cutter/CNC, give this a shot.&lt;/p&gt;

&lt;p&gt;Keep in mind that this &lt;strong&gt;&lt;em&gt;will not&lt;/em&gt;&lt;/strong&gt; fit the larger drawers like on the 10144.&lt;/p&gt;

&lt;p&gt;Download the STL file &lt;a href=&#34;https://github.com/davidk/3D-Printable-Parts-Divider&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To prevent ambiguities, the license for this (simple work) is WTFPL. Feel free to remix it, and do as you wish without reading walls of text.&lt;/p&gt;

&lt;p&gt;cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Avrrrinator (Revision A)</title>
      <link>http://localhost:1313/blog/2013-01-23-the-avrrrinator-revision-a/</link>
      <pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013-01-23-the-avrrrinator-revision-a/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/avrrrinator/avrrrinator-revA.png&#34; alt=&#34;avrrrinator rev a&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;A simple Bus Pirate v3 to AVR adapter. This was made to simplify wiring between the v3 Bus Pirate and an AVR ISP header. Tested with the &lt;a href=&#34;http://www.johngineer.com/projects/bb313/&#34;&gt;BB313&lt;/a&gt;, and ATTiny4313/85s.&lt;/p&gt;

&lt;p&gt;Add a 3 pin header and a jumper to power the target AVR from the Bus Pirate (for normal operation, programming, etc).&lt;/p&gt;

&lt;p&gt;Check out the &amp;ldquo;&lt;em&gt;Other work in this field&lt;/em&gt;&amp;rdquo; section below for other adapters as well (some of them support multiple protocols and programmers).&lt;/p&gt;

&lt;h2 id=&#34;make-one-for-yourself:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Make one for yourself&lt;/h2&gt;

&lt;p&gt;Grab a zip file of the entire repository by &lt;a href=&#34;https://github.com/davidk/avrrrinator/archive/master.zip&#34;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The .brd file is in the hardware/revA folder.&lt;/p&gt;

&lt;p&gt;From there, you can generate
your own Gerber files using Eagle and send them off, or use a service which processes the Eagle board file for you.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t already have a preferred fabricator, please give &lt;a href=&#34;http://oshpark.com/&#34;&gt;OSHPark&lt;/a&gt; a shot. OSHPark will take the .brd file, panel it and return your boards in a few weeks. It is also run by &lt;a href=&#34;https://twitter.com/laen/&#34;&gt;a very awesome person&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See the &amp;ldquo;&lt;em&gt;Bill of Materials&lt;/em&gt;&amp;rdquo; section for information on parts.&lt;/p&gt;

&lt;h2 id=&#34;notes-next-revision-improvements:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Notes &amp;amp; next revision improvements&lt;/h2&gt;

&lt;p&gt;The silkscreen is really small in some areas. This will be changed in a future run. If making one for yourself, feel free to change the silkscreen text sizes around, and add a miniature dinosaur.&lt;/p&gt;

&lt;h2 id=&#34;bill-of-materials:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Bill of Materials&lt;/h2&gt;

&lt;h4 id=&#34;pcb:b0111992a47110b3acce8a55c388e8a7&#34;&gt;PCB&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;1x&lt;/em&gt;: Avrrrinator PCB&lt;/p&gt;

&lt;h4 id=&#34;headers-jumper:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Headers/Jumper&lt;/h4&gt;

&lt;p&gt;These parts are from Mouser:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1x&lt;/em&gt;: &lt;strong&gt;151-8033-E&lt;/strong&gt; - Red jumper for power selection&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1x&lt;/em&gt;: &lt;strong&gt;517-9612066404AR&lt;/strong&gt; - 6 pin ISP header&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1x&lt;/em&gt;: &lt;strong&gt;649-68004-236&lt;/strong&gt; - Strip of header (enough for both the 10 pin Bus Pirate header and the 3 pin power select switch)&lt;/p&gt;

&lt;h4 id=&#34;cables:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Cables&lt;/h4&gt;

&lt;p&gt;If you don&amp;rsquo;t already have the necessary cables, pick these up. Both are needed since one connects to the Bus Pirate, and the other connects to the AVR:&lt;/p&gt;

&lt;p&gt;These parts are from Adafruit:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1x&lt;/em&gt;: &lt;a href=&#34;https://www.adafruit.com/products/370&#34;&gt;10-pin Socket/Socket IDC cable (6&amp;rdquo;)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1x&lt;/em&gt;: &lt;a href=&#34;https://www.adafruit.com/products/371&#34;&gt;6-pin Socket/Socket IDC cable (6&amp;rdquo;)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;optional-parts:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Optional parts&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1x&lt;/em&gt;: &lt;strong&gt;538-90130-1110&lt;/strong&gt; (Mouser) - BP box connector. This hasn&amp;rsquo;t been tested or soldered in, but it appears to fit comfortably within the layout of the board.&lt;/p&gt;

&lt;h2 id=&#34;resources:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://dangerousprototypes.com/docs/Bus_Pirate_AVR_Programming&#34;&gt;Bus Pirate AVR Programming&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-work:b0111992a47110b3acce8a55c388e8a7&#34;&gt;Other work&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://dangerousprototypes.com/2010/01/24/free-pcb-sunday-bus-pirate-picavr-programming-adapter/&#34;&gt;Dangerous Prototypes&amp;rsquo; PIC+AVR programmer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dangerousprototypes.com/forum/viewtopic.php?f=28&amp;amp;t=1942&#34;&gt;A Bus Pirate Breakout Board for different protocols (which includes an ISP header)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3D Printed Bus Pirate v3.6 Case (DP6037)</title>
      <link>http://localhost:1313/blog/2012-12-31-3d-printed-bus-pirate-case/</link>
      <pubDate>Mon, 31 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012-12-31-3d-printed-bus-pirate-case/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bus-pirate-cases/bus_pirate_case_v2-front-mirrored-blue-improved.png&#34; alt=&#34;Bus Pirate Case, Translucent Blue, Improved&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Source files and general instructions for printing can be found &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Bus Pirate is a pretty fantastic device for sniffing around and working with new circuits. It can even &lt;a href=&#34;http://dangerousprototypes.com/docs/Bus_Pirate_AVR_Programming&#34;&gt;act as an AVR programmer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After using one to fiddle with a few circuits, a case became necessary after seeing its value. While there are cases that can be purchased[1], a 3D printer was laying around waiting to be used.&lt;/p&gt;

&lt;p&gt;Finding only a &lt;a href=&#34;http://www.thingiverse.com/thing:33517&#34;&gt;case outline&lt;/a&gt; (which proved to be extremely useful as a jumping off point) on Thingiverse, one needed to be made for the newer Bus Pirate.&lt;/p&gt;

&lt;p&gt;After several hours (mostly spent re-calibrating the 3D printer, untangling filament, and playing musical notes with the timing belts), the printer popped out several iterations of cases.&lt;/p&gt;

&lt;p&gt;The first few worked well, but were dependent on PLA &amp;lsquo;rods and spikes&amp;rsquo; (scrap filament cut and heated on a hotbed to straighten) and press-fitting to hold the top and bottom halves together. The USB header was also unexposed, which caused leveling issues (since it was higher than the rest of the board).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bus-pirate-cases/bus-pirate-case-v1.png&#34; alt=&#34;Printed Bus Pirate Case, Reject&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Going forward with several revisions, and many rejects later (about 12!), a decent case started appearing. Instead of PLA rods, a few 8mm long M3 machine screws and M3 hex nuts were used. They&amp;rsquo;re not very common, but the M3s seem to fit rather well while providing a good degree of stability.&lt;/p&gt;

&lt;p&gt;The assembly order from the bottom: M3 screw, bottom plate, PCB, hex nut, top plate.&lt;/p&gt;

&lt;p&gt;While the top looks unsecured, it must actually be screwed/threaded in from the bottom with a decent amount of force.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bus-pirate-cases/bus-pirate-case-v2-front.png&#34; alt=&#34;Printed Bus Pirate Case, Front&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Polyimide tape was used on the back to protect the pins from being shorted out. The reason for not covering them in CAD is because they can be &lt;a href=&#34;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=N60WSQc-G_8#t=416s&#34;&gt;useful to probe&lt;/a&gt; with a multimeter at times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bus-pirate-cases/bus-pirate-case-v2-back.png&#34; alt=&#34;Printed Bus Pirate Case, Back&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Files are posted &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037&#34;&gt;here&lt;/a&gt; (CC-BY-SA; via original author), but may change in the future if I ever get around to beating the thing into a different shape.&lt;/p&gt;

&lt;p&gt;If you have an idea for a change, or can design a better one go for it!&lt;/p&gt;

&lt;h2 id=&#34;updates-errata:6c86a18651dceea50e592c955548af99&#34;&gt;Updates &amp;amp; Errata&lt;/h2&gt;

&lt;p&gt;1-1-13: For many printers with a perfectly flat print bed (borosilicate glass, metal, etc), it may be advantageous to mirror the output on one axis so that the top gets printed perfectly flat.&lt;/p&gt;

&lt;p&gt;With a borosilicate glass bed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bus-pirate-cases/bus-pirate-case-v2-front-mirrored.png&#34; alt=&#34;Bus Pirate Case, mirrored shiny front&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The exported STL file has been added to the &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037&#34;&gt;GitHub repository&lt;/a&gt;. Look for &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037/blob/master/dp6037-top-axis-flipped.stl?raw=true&#34;&gt;dp6037-top-axis-flipped.stl&lt;/a&gt; when grabbing it (or click that link).&lt;/p&gt;

&lt;p&gt;1-2-13: Yellow? Who prints stuff in yellow? Don&amp;rsquo;t you have blue?&lt;/p&gt;

&lt;p&gt;After a bit of recalibrating, this is what the case looks like in translucent blue. Not very high quality, but passable:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bus-pirate-cases/bus-pirate-case-v2-front-mirrored-blue.png&#34; alt=&#34;Bus Pirate Case, Translucent Blue&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;1-3-13: Here is a better front panel (printed after mending the Z-axis into alignment), which will probably be the last update (in this series of days).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bus-pirate-cases/bus_pirate_case_v2-front-mirrored-blue-improved.png&#34; alt=&#34;Bus Pirate Case, Translucent Blue, Improved&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;1-4-13: Added a link to source files at top and shortened/corrected more text to sound less silly.&lt;/p&gt;

&lt;h2 id=&#34;notes-references:6c86a18651dceea50e592c955548af99&#34;&gt;Notes &amp;amp; References&lt;/h2&gt;

&lt;p&gt;[1] Note that buying an acrylic case is really the way to go. They &lt;a href=&#34;http://www.seeedstudio.com/depot/bus-pirate-v36-acrylic-case-v1-dp6037-p-1229.html?cPath=178_184&#34;&gt;sell for about $3&lt;/a&gt;).. but if you have a 3D printer, it probably needs to earn its keep anyway.&lt;/p&gt;

&lt;h2 id=&#34;thanks-resources:6c86a18651dceea50e592c955548af99&#34;&gt;Thanks &amp;amp; Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Thanks to &lt;a href=&#34;http://www.thingiverse.com/thing:33517&#34;&gt;XQL for creating the model, and publishing it on Thingiverse&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want to purchase your own Bus Pirate, plenty of vendors sell them. The particular one I bought was from Adafruit. Check out their &lt;a href=&#34;https://www.adafruit.com/products/237&#34;&gt;Bus Pirates here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Flavored Time (A NTP server on your Pi, tethered to a GPS unit)</title>
      <link>http://localhost:1313/blog/2012-10-18-raspberry-pi-time-server/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012-10-18-raspberry-pi-time-server/</guid>
      <description>

&lt;p&gt;2014/11/12: This article&amp;rsquo;s is in the process of being revisited. Please keep in mind that it is very old before using its instructions and resources.&lt;/p&gt;

&lt;p&gt;GPS module connected to a Raspberry Pi (for accurate time keeping):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/ulti_gps_v3.png&#34; alt=&#34;Adafruit Ultimate GPS v3&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;a-primer-on-time:f0add37b64850e1a23640fa819df10c0&#34;&gt;A primer on time&lt;/h2&gt;

&lt;p&gt;Watch this brief video by
&lt;a href=&#34;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=p2BxAu6WZI8&#34;&gt;Bill Hammack, aka engineerguy on YouTube&lt;/a&gt;. It covers the complexities of keeping very accurate time in a short video!&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/p2BxAu6WZI8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;where-ntp-fits-in:f0add37b64850e1a23640fa819df10c0&#34;&gt;Where NTP fits in&lt;/h2&gt;

&lt;p&gt;Being on synchronized time is pretty important. Is your office clock faster or slower than the one on your watch? What about your phone? What if you turn it off for a month? A year?&lt;/p&gt;

&lt;p&gt;In other to get time from very accurate sources, some devices and services use the Network Time Protocol (NTP for short) to keep their time synchronized. Your device is probably using NTP as you read this!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How it works&lt;/em&gt;&lt;/strong&gt;: Periodically, your computer will connect to servers that speak NTP. After getting the time, your system does some math (to account for transmission delays, and bad clocks), and adjusts the system clock. This periodic synchronization keeps a clock from drifting too far behind, or too far ahead from the world standard.&lt;/p&gt;

&lt;p&gt;By itself though, NTP does not provide accurate time information. This the job of a dedicated reference clock.&lt;/p&gt;

&lt;p&gt;A reference clock is a precise source of time, and these are connected to a computer which transmit their data over a network using NTP.&lt;/p&gt;

&lt;p&gt;In our case, we can (ab)use a GPS unit as a reference device (in GPS, accurate positioning requires very accurate time). While not a lab quality reference clock, it has enough accuracy for most applications.&lt;/p&gt;

&lt;h2 id=&#34;strata:f0add37b64850e1a23640fa819df10c0&#34;&gt;Strata&lt;/h2&gt;

&lt;p&gt;In NTP parlance, time systems are arranged into different strata. Each level (starting from zero), determines how far away you are from a clock source. [1]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stratum 0&lt;/em&gt;&lt;/strong&gt;: Cesium/Rubidium-based clocks, radio and GPS clocks. Depending on precision, these can be very, very, very accurate (and really expensive too)!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stratum 1&lt;/em&gt;&lt;/strong&gt;: Computers attached to Stratum 0 sources. They expose the data from &lt;strong&gt;&lt;em&gt;Stratum 0&lt;/em&gt;&lt;/strong&gt; to the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stratum 2&lt;/em&gt;&lt;/strong&gt;: Collector of stratum 1 time over a network. May punt bad stratum 1 clocks (e.g. stop listening to them).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stratum N&lt;/em&gt;&lt;/strong&gt;: N level away from 0, does the same as 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stratum 16&lt;/em&gt;&lt;/strong&gt;: Considered to be unsynchronized.&lt;/p&gt;

&lt;p&gt;Most consumers of NTP data collect information from stratum 2 (or higher) sources.&lt;/p&gt;

&lt;p&gt;For instance, Apple&amp;rsquo;s &lt;strong&gt;time.apple.com&lt;/strong&gt; server is a stratum 2 time source. It might be connected to a bunch of stratum 1 time sources. In turn, the stratum 1 computers would be connected to a gaggle of stratum 0 reference clocks.&lt;/p&gt;

&lt;p&gt;Being a stratum 2 source, it figures out which stratum 1 time source(s) it can trust and aggregates all the data between those. Using a bit of math, it figures out which sources seem bad, and kicks those results to the curb.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% ntpq -p
     remote           refid      st
====================================
*time.apple.com  17.168.198.148   2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gps-clock-o-bot:f0add37b64850e1a23640fa819df10c0&#34;&gt;GPS Clock-o-Bot&lt;/h2&gt;

&lt;p&gt;That brings us to setting up our own GPS-sourced clock. Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Perhaps you are stuck on a remote island without a reliable Internet
connection.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You have some sort of experiment that needs to have great timing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You&amp;rsquo;re going to use the GPS hookup for something else entirely (like a phone   home device), and want the meat on how to do that. (Sure!)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You feel like abusing a NTP server for some reason, or policy prevents you
from getting accurate time through the Internet.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Having your own time server is cool.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Say this in an Australian accent, or with an accent that features a &lt;a href=&#34;http://en.wikipedia.org/wiki/High_rising_terminal&#34;&gt;high rising terminal&lt;/a&gt; so it sounds more awesome: &amp;ldquo;Why the heck not!&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;difficulties:f0add37b64850e1a23640fa819df10c0&#34;&gt;Difficulties&lt;/h2&gt;

&lt;p&gt;Beyond this point, this becomes a slightly advanced article. You&amp;rsquo;ll most likely be comfortable with a bit of prior Raspberry Pi/Linux/Electronics experience under your belt.&lt;/p&gt;

&lt;p&gt;I try to explain steps throughly, and provide links to external sources which should help even if you are a beginner.&lt;/p&gt;

&lt;h2 id=&#34;parts-list:f0add37b64850e1a23640fa819df10c0&#34;&gt;Parts List&lt;/h2&gt;

&lt;p&gt;All of these parts are available from one vendor, so you don&amp;rsquo;t have to order and coordinate shipping times. The vendor used here is Adafruit. They&amp;rsquo;re well regarded with very reasonable policies and good people.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/998&#34;&gt;Raspberry Pi&lt;/a&gt; - The brains of the project! Raspberry Pis sell out fast, so buying from another vendor may be the only possible way of acquiring one.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/746&#34;&gt;Adafruit Ultimate GPS Breakout, v3&lt;/a&gt; a very compact GPS unit with 1PPS output. (&lt;em&gt;Note&lt;/em&gt;: If you have a v1 or v2, you can still get a 1PPS signal &amp;ndash; you&amp;rsquo;ll need to solder a small wire to the exposed pad. See the PDF documentation for a pinout.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Hardware voltage warning: If you are using another GPS, please mind the GPIO pin voltages as they are only 3.3v tolerant. There is no over-voltage protection on the board. This means a bad connection could easily kill a pin or worse.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/289&#34;&gt;Wires&lt;/a&gt; - If you will be using the Pi Cobbler below along with a standard breadboard, the wires should just be solid core wire. If you will be wiring the GPS up directly (using the provided header), they should probably be Female/Female jumpers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/995&#34;&gt;Ethernet Cable&lt;/a&gt; - Or wireless adapter to connect. Definitely check old router boxes for this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/102&#34;&gt;SD Card&lt;/a&gt; - For loading a distribution. You probably have one of these already lying around.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/501&#34;&gt;Power Adapter&lt;/a&gt; - The power adapter should terminate to a micro USB cable (these are the slimmer &amp;ldquo;phone charger&amp;rdquo; cables). Be sure to look for an adapter with a current rating of around 850mA (or more).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;optional:f0add37b64850e1a23640fa819df10c0&#34;&gt;Optional&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/914&#34;&gt;Raspberry Pi Cobbler&lt;/a&gt; - This makes identifying the proper pins a piece of.. cake (pun intended).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/859&#34;&gt;Raspberry Pi Box&lt;/a&gt; - A simple enclosure that can have the breadboard stacked on top of it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.adafruit.com/products/64&#34;&gt;Breadboard&lt;/a&gt; - For use with the cobbler.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;distribution:f0add37b64850e1a23640fa819df10c0&#34;&gt;Distribution&lt;/h2&gt;

&lt;p&gt;Starting from scratch, you will need Occidentalis, a fork of Raspbian.&lt;/p&gt;

&lt;p&gt;Download &lt;a href=&#34;http://learn.adafruit.com/adafruit-raspberry-pi-educational-linux-distro/&#34;&gt;by following a few links here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After downloading, write the image to the SD card.&lt;/p&gt;

&lt;p&gt;If you have forgotten how to write images (it happens even to the best of us), &lt;a href=&#34;http://elinux.org/RPi_Easy_SD_Card_Setup&#34;&gt;try this guide on elinux.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;initial-setup:f0add37b64850e1a23640fa819df10c0&#34;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After flashing your SD card, insert the card and boot the Raspberry Pi by plugging it in.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;/boot/cmdline.txt&lt;/code&gt;, along with &lt;code&gt;/etc/inittab&lt;/code&gt; to free up the UART (which shows up on &lt;code&gt;/dev/ttyAMA0&lt;/code&gt;) so that the NMEA &amp;ldquo;serial&amp;rdquo; data can be read on the Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo nano /boot/cmdline.txt

# Remove these in cmdline.txt:
# `console=ttyAMA0,115200`
# and `kgdboc=ttyAMA0,115200`.
# Mine looks like this:

dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hold &lt;code&gt;CTRL+o&lt;/code&gt; and hit &lt;code&gt;[Enter]&lt;/code&gt; to save. Then hold &lt;code&gt;CTRL+x&lt;/code&gt; to exit.&lt;/p&gt;

&lt;p&gt;Next, edit &lt;code&gt;/etc/inittab&lt;/code&gt; and comment out, or remove the last line in this file (page down till you see it):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo nano /etc/inittab
#Spawn a getty on Raspberry Pi serial line
#T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you are done, power off the Pi and begin connecting things to it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo poweroff

# Remove the power connector when only the PWR LED remains lit/screen
# goes blank and begin attaching things.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect the following pins (Raspberry Pi is on the right, GPS on the left):&lt;/p&gt;

&lt;p&gt;Here is a really boring pin out diagram:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GPS     RPI
---     ---
RX  --&amp;gt; TXD
TX  --&amp;gt; RXD
PPS --&amp;gt; GPIO #23
GND --&amp;gt; GND
VIN --&amp;gt; 5V0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wiring for the Adafruit Ultimate GPS v3 (RX-&amp;gt;TXD isn&amp;rsquo;t connected):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/ulti_gps_v3.png&#34; alt=&#34;Adafruit Ultimate GPS v3&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;For the v2, with a wire soldered onto the 1PPS pad (the 1PPS wire goes to the blue one off image, which then leads to GPIO #23):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/ulti_gps_v2.png&#34; alt=&#34;Adafruit Ultimate GPS v2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you need background on where GPIO pin 23 is located when connecting directly, see &lt;a href=&#34;http://elinux.org/RPi_Low-level_peripherals&#34;&gt;this page at elinux.org&lt;/a&gt;. Otherwise, GPIO #23 is just #23 if you&amp;rsquo;re using the Pi Cobbler.&lt;/p&gt;

&lt;p&gt;Once everything is connected and you&amp;rsquo;ve verified everything twice, connect the power.&lt;/p&gt;

&lt;h2 id=&#34;1pps:f0add37b64850e1a23640fa819df10c0&#34;&gt;1PPS&lt;/h2&gt;

&lt;p&gt;You may be wondering about the PPS pin!&lt;/p&gt;

&lt;p&gt;While NMEA data is good enough for synchronizing time to within a few hundred milliseconds, it can be bad for applications that require precision timing, or just plain bad if you&amp;rsquo;re obsessed with getting precise time.&lt;/p&gt;

&lt;p&gt;This is where the PPS pin we connected earlier comes into play. &lt;em&gt;1PPS&lt;/em&gt; or &lt;strong&gt;One Pulse Per Second&lt;/strong&gt;, is a signal that says &amp;ldquo;here is the precise start of a second!&amp;rdquo; A PPS signal is usually accurate to a few nanoseconds give or take whatever is in the path between sender and receiver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/gps_1pps.png&#34; alt=&#34;1PPS signal&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Alone, 1PPS can only tell you the precise start of a second, so anything that wants to set time accurately needs &lt;em&gt;both&lt;/em&gt; NMEA data and 1PPS information.&lt;/p&gt;

&lt;p&gt;To effectively utilize 1PPS, we&amp;rsquo;ll have to patch the kernel and add support.&lt;/p&gt;

&lt;h2 id=&#34;switching-the-kernel:f0add37b64850e1a23640fa819df10c0&#34;&gt;Switching The Kernel&lt;/h2&gt;

&lt;p&gt;Doing this isn&amp;rsquo;t particularly hard. However, keep in mind that it will overwrite any special modifications you&amp;rsquo;ve already done to the kernel, and will break on upgrades to the kernel.&lt;/p&gt;

&lt;p&gt;In order to keep things simple, I have a repository with pre-made kernel modules and kernel image. If you&amp;rsquo;d like to view the source this is based on, &lt;a href=&#34;https://github.com/davidk/adafruit-raspberrypi-linux&#34;&gt;click here&lt;/a&gt;. [2]&lt;/p&gt;

&lt;p&gt;To grab the pre-compiled kernel and modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install git
$ git clone https://github.com/davidk/adafruit-raspberrypi-linux-pps.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back up and copy the kernel image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd adafruit-raspberrypi-linux-pps
$ sudo mv /boot/kernel.img /boot/kernel.img.orig
$ sudo cp kernel.img /boot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move the modules over:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo mv modules/* /lib/modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, add the &lt;code&gt;pps-gpio&lt;/code&gt; module to /etc/modules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run this command in a sub-shell so appending works
$ sudo sh -c &amp;quot;echo &#39;pps-gpio&#39; &amp;gt;&amp;gt; /etc/modules&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;automatically-making-links-in-etc-udev:f0add37b64850e1a23640fa819df10c0&#34;&gt;Automatically Making Links In /etc/udev&lt;/h2&gt;

&lt;p&gt;By default, our setup isn&amp;rsquo;t usable by the NTP server since it expects data to be present at specific locations. By adding a few rules to udev, we can automatically make symbolic links (aliases, shortcuts, etc) from our NMEA serial and 1PPS data, to a place where NTP can read and interpret it.&lt;/p&gt;

&lt;p&gt;If we didn&amp;rsquo;t create these rules, the NTP driver would get no data to process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo nano /etc/udev/rules.d/80-gps-to-ntp.rules
# Change MODE of ttyAMA0 so it is readable by NTP and provide a symlink to
# /dev/gps0
KERNEL==&amp;quot;ttyAMA0&amp;quot;, SUBSYSTEM==&amp;quot;tty&amp;quot;, DRIVER==&amp;quot;&amp;quot;, SYMLINK+=&amp;quot;gps0&amp;quot;, MODE=&amp;quot;0666&amp;quot;
# Symlink /dev/pps0 to /dev/gpspps0
KERNEL==&amp;quot;pps0&amp;quot;, SUBSYSTEM==&amp;quot;pps&amp;quot;, DRIVER==&amp;quot;&amp;quot;, SYMLINK+=&amp;quot;gpspps0&amp;quot;, MODE=&amp;quot;0666&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hold &lt;code&gt;CTRL+o&lt;/code&gt; to write the file, tap &lt;code&gt;[Enter]&lt;/code&gt; and then hold &lt;code&gt;CTRL+x&lt;/code&gt; to exit.&lt;/p&gt;

&lt;h2 id=&#34;installing-and-configuring-ntp:f0add37b64850e1a23640fa819df10c0&#34;&gt;Installing and Configuring NTP&lt;/h2&gt;

&lt;p&gt;To install NTP, we abuse the default install a bit since the repository version doesn&amp;rsquo;t really pick up on 1PPS. It will also take some time to do all of this since we&amp;rsquo;re compiling from scratch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install ntp
$ sudo apt-get remove ntp
$ sudo apt-get update
$ sudo apt-get install libcap-dev
$ sudo apt-get install pps-tools
$ wget http://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-dev/ntp-dev-4.2.7p319.tar.gz
$ tar -xvf ntp-dev-4.2.7p319.tar.gz
$ cd ntp-dev-4.2.7p319

$ ./configure --prefix=/usr --enable-all-clocks --enable-parse-clocks \
--enable-SHM --enable-debugging --sysconfdir=/var/lib/ntp --with-sntp=no \
--with-lineeditlibs=edit --without-ntpsnmpd --disable-local-libopts \
--disable-dependency-tracking &amp;amp;&amp;amp; make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to edit /etc/init.d/ntp and change the DAEMON line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo nano /etc/init.d/ntp
DAEMON=/usr/bin/ntpd
#DAEMON=/usr/sbin/ntpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have been dropped back to the terminal, edit &lt;code&gt;/etc/ntp.conf&lt;/code&gt; and add the following (be sure to change the broadcast line if it differs for you):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo nano /etc/ntp.conf

# http://www.eecis.udel.edu/~mills/ntp/html/drivers/driver20.html explains
# these settings
# Slightly modified, but credit to:
# Paul Kennedy @ (http://www.raspberrypi.org/phpBB3/viewtopic.
#	php?f=41&amp;amp;t=1970&amp;amp;start=80)
server 127.127.20.0 mode 17 minpoll 3 iburst true prefer
fudge 127.127.20.0 flag1 1 time2 0.496
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a general setup with an Internet connected Pi, leaving these uncommented is generally considered good practice.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server 0.debian.pool.ntp.org iburst
server 1.debian.pool.ntp.org iburst
server 2.debian.pool.ntp.org iburst
server 3.debian.pool.ntp.org iburst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do the bits in the server line do? [3]&lt;/p&gt;

&lt;h4 id=&#34;server-127-127-20-0-mode-17-minpoll-3-iburst-true-prefer:f0add37b64850e1a23640fa819df10c0&#34;&gt;server 127.127.20.0 mode 17 minpoll 3 iburst true prefer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;127.127.20.0&lt;/code&gt;: Specify the GPS_NMEA driver.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;mode 17&lt;/code&gt;: This sets the line speed (bit 4, dec: 16) to 9600 bps. Additionally, $GPRMC is processed (bit 0, dec: 1). We get a total sum of 17 when adding the decimal parts together (hence &amp;ldquo;mode 17&amp;rdquo;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;minpoll&lt;/code&gt;: Minimum polling interval for NTP messages in a power of 2. Here, 3 = 8 seconds.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;iburst&lt;/code&gt;: If a server is unreachable, send a burst of eight packets instead of one.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;true&lt;/code&gt;: Let the server survive NTP&amp;rsquo;s algorithmic weeding.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;prefer&lt;/code&gt;: If we have a choice among good hosts (post-determination, etc), use this one for syncing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;fudge-127-127-20-0-flag1-1-time2-0-496:f0add37b64850e1a23640fa819df10c0&#34;&gt;fudge 127.127.20.0 flag1 1 time2 0.496&lt;/h4&gt;

&lt;p&gt;The fudge options are driver dependent. [4]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;127.127.20.0&lt;/code&gt;: Specify the GPS_NMEA driver.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;flag1 1&lt;/code&gt;: Activate PPSAPI, and process the PPS signals we get.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;time2&lt;/code&gt;: Compensate slightly for transmission delays. Instructions for tuning this are located on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ntp/html/drivers/driver20.html&#34;&gt;driver home page&lt;/a&gt;. Specifically, look for 7 (bit) / 128 (decimal) in the mode section.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A complete explanation of the flags used is provided at the website above. You can also just &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ntp/html/drivers/driver20.html&#34;&gt;click here&lt;/a&gt; to be taken there as well.&lt;/p&gt;

&lt;h2 id=&#34;reboot:f0add37b64850e1a23640fa819df10c0&#34;&gt;Reboot&lt;/h2&gt;

&lt;p&gt;Now that the kernel is updated, udev makes links properly, and NTP is installed+configured.. all that is left to do is pray to your local noodly appendage (or other $x of choice) and reboot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;checking-the-time:f0add37b64850e1a23640fa819df10c0&#34;&gt;Checking the time&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;re back up, wait for your GPS to lock (give it a view of the sky to make this process faster).&lt;/p&gt;

&lt;p&gt;When your GPS is locked to a sufficient number of satellites (the Adafruit GPS module will blink intermittently), type &lt;code&gt;ntpq -p&lt;/code&gt; into your Raspberry Pi&amp;rsquo;s console, and you&amp;rsquo;ll get something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ntpq -p
     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
oGPS_NMEA(0)     .GPS.            0 l    8    8  377    0.000   -0.025   0.002
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unit-calibration-skip-if-not-using-adafruit-s-gps-module:f0add37b64850e1a23640fa819df10c0&#34;&gt;Unit Calibration (skip if not using Adafruit&amp;rsquo;s GPS module)&lt;/h2&gt;

&lt;p&gt;To get the best out of the Adafruit GPS unit, we will tune it so that it outputs only the sentences we need. In particular, we&amp;rsquo;re interested only in the $GPRMC lines.&lt;/p&gt;

&lt;p&gt;Before continuing, ensure that the RX (GPS) to TXD (Raspberry Pi) line is connected. Add an extra wire if it isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Note that these changes are not permanent; they will be lost during a power cycle (install a battery to prevent this from happening), or reverted using another command. [5]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo -e &#39;$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n&#39; &amp;gt; /dev/ttyAMA0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command squelches all of the other NMEA sentences and only outputs $GPRMC, making everything tick a little more efficiently. To verify that the proper sentences are being output, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Tap CTRL+C to exit
$ cat /dev/ttyAMA0
$PGTOP ....
$GPRMC ....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In certain cases, it may take several tries in order to get the unit to recognize the command properly.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in playing around with the outputs, check out &lt;a href=&#34;http://www.adafruit.com/datasheets/PMTK_A08.pdf&#34;&gt;this PDF&lt;/a&gt;, and use this &lt;a href=&#34;http://www.hhhh.org/wiml/proj/nmeaxor.html&#34;&gt;checksum calculator&lt;/a&gt; to get the value at the end (this means that if we change the line above, the &lt;code&gt;*29&lt;/code&gt; value changes when the command changes.. so we would need to calculate a new checksum!).&lt;/p&gt;

&lt;h2 id=&#34;lights:f0add37b64850e1a23640fa819df10c0&#34;&gt;Lights!&lt;/h2&gt;

&lt;p&gt;On a system with &lt;code&gt;ntpdate&lt;/code&gt; (a Linux or OS X system usually has this utility), we can query the Raspberry Pi to get and/or set the time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ntpdate -vdq 192.168.1.101
24 Dec 04:13:42 ntpdate[8390]: ntpdate 4.2.6p5@1.2349-o Fri Apr 27 08:36:47 UTC 2012 (1)
Looking for host 192.168.1.101 and service ntp
host found : 192.168.1.101
transmit(192.168.1.101)
receive(192.168.1.101)
transmit(192.168.1.101)
receive(192.168.1.101)
transmit(192.168.1.101)
receive(192.168.1.101)
transmit(192.168.1.101)
receive(192.168.1.101)
server 192.168.1.101, port 123
stratum 1, precision -19, leap 00, trust 000
refid [GPS], delay 0.02612, dispersion 0.00000
transmitted 4, in filter 4
reference time:    d482c575.72b3b105  Mon, Dec 24 2012  4:13:41.448
originate timestamp: d482c57c.9e9ef4c5  Mon, Dec 24 2012  4:13:48.619
transmit timestamp:  d482c57c.9d24334c  Mon, Dec 24 2012  4:13:48.613
filter delay:  0.02621  0.02617  0.02612  0.02620
         0.00000  0.00000  0.00000  0.00000
filter offset: 0.005206 0.005221 0.005233 0.005197
         0.000000 0.000000 0.000000 0.000000
delay 0.02612, dispersion 0.00000
offset 0.005233

24 Dec 04:13:48 ntpdate[8390]: adjust time server 192.168.1.101 offset 0.005233 sec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the last line says &amp;ldquo;Server dropped: Leap not in sync&amp;rdquo; &amp;ndash; it may take some time for trust in the time to be established. This tends to be on the order of minutes; if it happens, wait around 26 to 30 minutes and try again.&lt;/p&gt;

&lt;h2 id=&#34;integration:f0add37b64850e1a23640fa819df10c0&#34;&gt;Integration&lt;/h2&gt;

&lt;p&gt;Ideally, this itself would be automated somehow. Each system has a time setting that allows you to set the time sync source.&lt;/p&gt;

&lt;h3 id=&#34;os-x:f0add37b64850e1a23640fa819df10c0&#34;&gt;OS X&lt;/h3&gt;

&lt;p&gt;Click the time at the top right, and click Date &amp;amp; Time Preferences. Type in your Raspberry Pi&amp;rsquo;s address next to &amp;ldquo;Set date and time automatically.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;linux:f0add37b64850e1a23640fa819df10c0&#34;&gt;Linux&lt;/h3&gt;

&lt;p&gt;If using a desktop, this tends to be handled in a GUI menu. If not, check to see if you have, or can install a NTP daemon. Then edit ntp.conf (usually located in the /etc/ directory) and set the &lt;code&gt;server&lt;/code&gt; stanza as appropriate.&lt;/p&gt;

&lt;h2 id=&#34;windows:f0add37b64850e1a23640fa819df10c0&#34;&gt;Windows&lt;/h2&gt;

&lt;p&gt;Windows users can also right click the time, click the Adjust Date/Time option, click on Internet Time (tab), then Change settings, and type their Raspberry Pi&amp;rsquo;s address into the box. Click Update now for effect.&lt;/p&gt;

&lt;h2 id=&#34;thanks-updates:f0add37b64850e1a23640fa819df10c0&#34;&gt;Thanks &amp;amp; Updates&lt;/h2&gt;

&lt;p&gt;This will be a perpetually updating post as I fine-tune and discover new things to do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.raspberrypi.org/phpBB3/viewtopic.php?f=41&amp;amp;t=1970&#34;&gt;Special thanks to everyone in this thread over on the Raspberry Pi forums who paved the way for this lengthy documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: No consideration (except for great customer service) was given to me by Adafruit for writing this. I did win an unrelated prize a few days ago that I should dig into though (OHS bag of swag).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;11/12/12&lt;/code&gt;: Thanks to @karldyson for reporting that PPS was not being picked up properly by the repository packages. Looks like that bug is still there!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;12/24/12&lt;/code&gt;: Added information on calibrating Adafruit&amp;rsquo;s GPS module (including references) and updated offset in configuration. Clobbered the introduction and added more spelling errors/walls of text to confuse/clarify things a bit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1/15/13&lt;/code&gt;: Changed the hardware voltage warning (fixed non-serious typo). Also tried to un-break formatting for note #5 and redirected help to a more proper place.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;02/05/13&lt;/code&gt;: Added a reminder to connect the proper line before working on
the Adafruit GPS module.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;02/06/13&lt;/code&gt;: The DAEMON line in /etc/init.d/ntp had a typo, and should be /usr/bin/ntpd (due to the prefix used).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;03/03/13&lt;/code&gt;: Thanks to both Sven Wunder and @davidmonro_ for reporting that pps-tools needs to be installed during a compile of NTP from source.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;05/09/13&lt;/code&gt;: Collapsed the configure line (it was tested to be cut and paste friendly), and reduced the amount of make by one.&lt;/p&gt;

&lt;h2 id=&#34;extra-information-on-ntp:f0add37b64850e1a23640fa819df10c0&#34;&gt;Extra Information on NTP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Selecting reliable time servers: &lt;a href=&#34;http://support.ntp.org/bin/view/Support/SelectingOffsiteNTPServers#Section_5.3.3.&#34;&gt;http://support.ntp.org/bin/view/Support/SelectingOffsiteNTPServers#Section_5.3.3.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This includes a discussion about how a proper NTP setup should look like (having three servers to sync time is a good idea).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ntpq documentation: &lt;a href=&#34;http://doc.ntp.org/4.1.1/ntpq.htm&#34;&gt;http://doc.ntp.org/4.1.1/ntpq.htm&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RFC 5905 (NTP v4 standard, very detailed): &lt;a href=&#34;http://tools.ietf.org/html/rfc5905&#34;&gt;http://tools.ietf.org/html/rfc5905&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes-references:f0add37b64850e1a23640fa819df10c0&#34;&gt;Notes &amp;amp; References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Network_Time_Protocol#Clock_strata&#34;&gt;http://en.wikipedia.org/wiki/Network_Time_Protocol#Clock_strata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The kernel fork I used and modified is available &lt;a href=&#34;https://github.com/davidk/adafruit-raspberrypi-linux&#34;&gt;here&lt;/a&gt;. Look under the &lt;code&gt;ppsgpio&lt;/code&gt; branch. You can clone it or download the entire thing by clicking around.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.ntp.org/4.2.6p5/confopt.html&#34;&gt;http://doc.ntp.org/4.2.6p5/confopt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/ntp/html/drivers/driver20.html&#34;&gt;http://www.eecis.udel.edu/~mills/ntp/html/drivers/driver20.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Note that this disables select sentences, so if you&amp;rsquo;ll be re-purposing your
Adafruit GPS unit in the future, you may use this command to reset it to its default sentences:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo -e &#39;$PMTK314,-1*04\r\n&#39; &amp;gt; /dev/ttyAMA0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that fails, removing the battery and unhooking the power for your unit will usually revert it to its old behavior.&lt;/p&gt;

&lt;p&gt;cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AVR Programming with Adafruit&#39;s Atmega32u4</title>
      <link>http://localhost:1313/blog/2012-10-01-avr-programming-with-an-adafruit-atmega32u4/</link>
      <pubDate>Mon, 01 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012-10-01-avr-programming-with-an-adafruit-atmega32u4/</guid>
      <description>

&lt;h2 id=&#34;introduction:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This guide will help you build your own &lt;a href=&#34;http://www.fourwalledcubicle.com/AVRISP.php&#34;&gt;LUFA AVRISP-MKII clone&lt;/a&gt; using the Adafruit Atmega32u4
breakout board.&lt;/p&gt;

&lt;h2 id=&#34;build-materials:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Build Materials&lt;/h2&gt;

&lt;h4 id=&#34;linux:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Linux&lt;/h4&gt;

&lt;p&gt;You will need Linux as a base for programming and compiling the LUFA project&amp;rsquo;s code. Using another operating system is possible, but won&amp;rsquo;t be covered here (sorry!) If you don&amp;rsquo;t have a dedicated Linux installation, try a &lt;a href=&#34;http://www.ubuntu.com/download/desktop&#34;&gt;Linux live CD&lt;/a&gt; and install the packages below to program.&lt;/p&gt;

&lt;p&gt;Installation of AVR tools are provided for the Ubuntu and Fedora Linux distributions.&lt;/p&gt;

&lt;h4 id=&#34;adafruit-atmega32u4-breakout-https-www-adafruit-com-products-296:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;&lt;a href=&#34;https://www.adafruit.com/products/296&#34;&gt;Adafruit Atmega32u4 breakout&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A modified LUFA CDC bootloader comes pre-installed on these. This allows the chip to be programmed without an external programmer
(at the cost of some memory space).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/atmega32u4.JPG&#34; alt=&#34;Atmega32u4 with ISP and programming reset line connected&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;For programming breakout boards, a 6-pin cable is attached to the programmer. A wire is hooked up to B4 (which connects to the target AVR&amp;rsquo;s RESET pin).&lt;/p&gt;

&lt;p&gt;Note that without modification, the RESET line will trigger on the 6-pin cable as a part of the
programming process through B4. Since the 6-pin cable connects RESET between both target and programmer, the programmer itself will reset when B4 is asserted (which
ends the attempt). This gets worked around a little bit later by splicing into the wire.&lt;/p&gt;

&lt;p&gt;This method is mostly optional, but useful since some breakouts are only programmed easily through the header.&lt;/p&gt;

&lt;h4 id=&#34;breadboard-wires-and-maybe-a-zif-socket:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Breadboard, wires, and maybe a ZIF socket&lt;/h4&gt;

&lt;p&gt;It is also possible to use a breadboard to program a chip. A completed layout looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/32u4bb_programmer.png&#34; alt=&#34;Breadboard Atmega32u4 ISP programmer targeting ATmega328P&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;There are problems with this setup:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Removing the programmed chip may be difficult/annoying. A ZIF (zero insertion force) socket may be appropriate if programming a large quantity
of chips.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Depending on fuse settings, the recovery clock (or, as seen in the picture, a resonator)
may be needed in order to program the chip properly. Breakout boards usually have some sort of clock source installed.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For most, it may be better to program using a dedicated PCB that has the 6-pin header broken out. This might be an
&lt;a href=&#34;http://arduino.cc&#34;&gt;Arduino&lt;/a&gt; for Atmega328Ps, or the &lt;a href=&#34;http://www.johngineer.com/projects/bb313/&#34;&gt;BB313&lt;/a&gt; for ATTiny chips.&lt;/p&gt;

&lt;p&gt;Here are the necessary connections from the Atmega32u4 breakout to the chip being programmed (if using a breadboard):&lt;/p&gt;

&lt;h3 id=&#34;connections-for-breadboard:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Connections for breadboard&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;32u4 -to-&amp;gt; Target chip
B1   ----&amp;gt; SCK    (Arduino Digital Pin: 13)
B3   ----&amp;gt; MISO   (Arduino Digital Pin: 12)
B2   ----&amp;gt; MOSI   (Arduino Digital Pin: 11)
B4   ----&amp;gt; RESET  (Arduino Analog  Pin: A6)

GND  ----&amp;gt; GND    (Note: 1)
VCC  ----&amp;gt; VCC    (Note: 1)

Recovery Clock    (Note: 2)
B5   ----&amp;gt; XTAL1  (not needed for Arduino boards)


1. There may be extra tie in points for these.
   Check the datasheet to be sure.
2. The recovery clock can be used if your fuses are set incorrectly.

   If using the recovery clock, be sure to set the programing speed to 125KHz
   1/125000Hz = 8x10^-6 seconds (or 8 microseconds, since 1 microsecond -&amp;gt; 1x10^-6 seconds)  
   For avrdude add this as a parameter to set the microsecond bitclock period:
            -B 8
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Optional (for a more compact setup): 6-pin IDC cable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A 6-pin cable will stop the programmer from becoming a bundled mess of wires. This works since most of the necessary
pins (MISO/SCK/VCC/MOSI/GND) are broken out to the header. However, since both RESET lines are connected, the programmer itself will be reset if
connected without modification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/idc-reset-cut.png&#34; alt=&#34;Modified 6-pin IDC cable&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Here is an example of the 6-pin cable which has been cut with a sharp knife. The line to cut is the 5th wire, starting from the red line
as shown in the picture. If you aren&amp;rsquo;t sure, verify with a multimeter that the line is indeed the one used for RESET.&lt;/p&gt;

&lt;p&gt;To verify: With your spare Arduino or other breakout board, just plug a wire into the RESET line (connected to a lead on your multimeter in
continuity test mode &amp;ndash; aka &amp;lsquo;beep beep beep&amp;rsquo; mode), and
connect the 6-pin header (red stripe to small dot, or box connector &amp;ldquo;tab&amp;rdquo; to the proper place). Poke the small wires coming out of the box to check.
You may need to press with a bit of force.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/programmer_cable_test.png&#34; alt=&#34;Probing 6-pin IDC cable&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;For the absolutely paranoid, pulling apart the box connector may be a good idea.&lt;/p&gt;

&lt;p&gt;Other ways around cutting up your cable: fuse manipulation, designing your
own PCB (as some have), cutting header pins, etc. If you end up using this particular
method, soldering up a detachable wire to the cable&amp;rsquo;s RESET (then connecting to the programmer&amp;rsquo;s B4 pin) might be a worthwhile project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Female/Female jumper wire(s) (Female/Male, Male/Male, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A wire to connect the reset line (B4) and other pins. You might need a single piece of male header to tie the jumper wire to your destination board.
The RESET line is triggered using this connection.&lt;/p&gt;

&lt;h2 id=&#34;finding-your-board:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Finding your board&lt;/h2&gt;

&lt;h3 id=&#34;linux-1:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Linux&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m using Linux, so when I plug in the board this shows up after typing &lt;code&gt;dmesg&lt;/code&gt; into a terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[15138.776119] usb 3-1: new full-speed USB device number 51 using xhci_hcd
[15138.791800] usb 3-1: New USB device found, idVendor=239a, idProduct=0001
[15138.791806] usb 3-1: New USB device strings: Mfr=0, Product=1, SerialNumber=0
[15138.791808] usb 3-1: Product: AVR CDC Bootloader
[15138.793350] cdc_acm 3-1:1.0: ttyACM0: USB ACM device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ttyACM0: USB ACM device&lt;/code&gt; on the last line is where data gets accepted. There are a myriad of other ways to figure that out,
but parsing dmesg will tell us if it failed to enumerate somehow.&lt;/p&gt;

&lt;h2 id=&#34;download-lufa-linux:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Download LUFA (Linux)&lt;/h2&gt;

&lt;p&gt;The next step from here is to download the files necessary to load the programmer. Run the following (after acquiring git [1]).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/davidk/lufa.git
Cloning into &#39;lufa&#39;...
remote: Counting objects: 52669, done.
remote: Compressing objects: 100% (10637/10637), done.
remote: Total 52669 (delta 42901), reused 51050 (delta 41412)
Receiving objects: 100% (52669/52669), 9.49 MiB | 497 KiB/s, done.
Resolving deltas: 100% (42901/42901), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a small fork of Dean Camera&amp;rsquo;s &lt;a href=&#34;http://www.fourwalledcubicle.com/LUFA.php&#34;&gt;LUFA project&lt;/a&gt; (a framework for developing USB-enabled AVRs). Of interest is Dean&amp;rsquo;s clean-room
copy of the AVRISP-MKII programmer, which turns the Atmega32u4 breakout into a programmer for other AVRs (egg, meet chicken). Run the following from
outside the lufa directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd lufa/Projects/AVRISP-MKII/
$ git checkout atmega32u4-avrisp
  Branch atmega32u4-avrisp set up to track remote branch
  atmega32u4-avrisp from origin.
  Switched to a new branch &#39;atmega32u4-avrisp&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;re in the branch, ensure that your avr utilities are installed.&lt;/p&gt;

&lt;p&gt;For Fedora users:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum install avr-binutils avr-gcc avr-libc avrdude
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ubuntu users:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo aptitude install gcc-avr avr-libc avrdude
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Programming (check to see if your boot light is fading in and out, if not, press the white button and run the following):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo make avrdude AVRDUDE_PROGRAMMER=avr109 AVRDUDE_PORT=/dev/ttyACM0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;connect-the-programmer:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Connect the programmer&lt;/h2&gt;

&lt;p&gt;If it all went well, you now have a programmer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/32u4-to-arduino.png&#34; alt=&#34;ISP programming Arduino Uno&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Remember: The single red wire goes from B4 to the Arduino&amp;rsquo;s RESET pin.&lt;/p&gt;

&lt;h2 id=&#34;start-your-engines:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Start your engines&lt;/h2&gt;

&lt;p&gt;At this point, all the hard work is done! Before programming, make sure that the RESET line is connected to B4.
&lt;code&gt;avrdude&lt;/code&gt; can be used to program a board by running it as such:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For Atmega328P chips
$ sudo avrdude -patmega328p -cavrispmkii -Pusb -Uflash:w:Blink.cpp.hex

# For an Attiny4313
$ sudo avrdude -pattiny4313 -cavrispmkii -Pusb -Uflash:w:blinky.hex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example session (targeting an Attiny4313 with the blink program from the bb313 website):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo avrdude -pattiny4313 -cavrispmkii -Pusb -Uflash:w:blinky.hex
[sudo] password for davidk: hunter2

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.00s

avrdude: Device signature = 0x1e920d
avrdude: NOTE: FLASH memory has been specified, an erase cycle will be performed
 To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file &amp;quot;blinky.hex&amp;quot;
avrdude: input file blinky.hex auto detected as Intel Hex
avrdude: writing flash (60 bytes):

Writing | ################################################## | 100% 0.02s

avrdude: 60 bytes of flash written
avrdude: verifying flash memory against blinky.hex:
avrdude: load data flash data from input file blinky.hex:
avrdude: input file blinky.hex auto detected as Intel Hex
avrdude: input file blinky.hex contains 60 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 0.02s

avrdude: verifying ...
avrdude: 60 bytes of flash verified

avrdude: safemode: Fuses OK

avrdude done.  Thank you.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/bb313_programmed.png&#34; alt=&#34;programming a bb313&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;programming-without-using-sudo-or-root-linux:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Programming without using &amp;lsquo;sudo&amp;rsquo; or root (Linux)&lt;/h3&gt;

&lt;p&gt;Running avrdude as root is kind of excessive, even temporarily. To run it as a normal user, we can eck out the following to make it work properly:&lt;/p&gt;

&lt;p&gt;First run &lt;code&gt;groups&lt;/code&gt; to get the list of groups your user currently belongs to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ groups
davidk dialout wheel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This determines what we set in the GROUP=&amp;ldquo;&amp;rdquo; field below (in this case i&amp;rsquo;ve picked wheel):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo su
# echo &#39;ATTR{idVendor}==&amp;quot;03eb&amp;quot;, ATTR{idProduct}==&amp;quot;2104&amp;quot;, GROUP=&amp;quot;wheel&amp;quot;, MODE=&amp;quot;0666&amp;quot;&#39;
&amp;gt;&amp;gt; /etc/udev/rules.d/60-avrispmkii.rules
# udevadm trigger
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;thanks:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Special thanks to Dean Camera, who saw that I was making changes to my fork on Github (which is a mirror of his SVN repo)
and stopped by my lowly branch to suggest a small change. Good guy (he did it again too, on an unrelated branch).&lt;/p&gt;

&lt;h3 id=&#34;problem:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Problem?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/davidk/davidk.github.com/issues&#34;&gt;Tack on something here&lt;/a&gt;. I will try to help or spin you in the right
direction.&lt;/p&gt;

&lt;h3 id=&#34;reference-s:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Reference(s)&lt;/h3&gt;

&lt;p&gt;[1] Get git via your preferred package manager, or check out &lt;a href=&#34;http://git-scm.com&#34;&gt;http://git-scm.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;updates:0bac2ba79e0556b332cd6050dd5cb073&#34;&gt;Updates&lt;/h3&gt;

&lt;p&gt;01-15-13: Added information on using avrdude in a non-root fashion for Linux. Also threw in some magic to make console stuff pretty.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>music</title>
      <link>http://localhost:1313/blog/2012-09-16-test-music/</link>
      <pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012-09-16-test-music/</guid>
      <description>&lt;p&gt;A bit of Ruby to start things off (I guess I should say &amp;lsquo;test&amp;rsquo; in here too).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#!/usr/bin/env ruby

class Music
  attr_accessor :id, :artist, :title, :album
end

songs = Array.new

ARGV.each do |m|
  f = File.open(m)
  while (l = f.gets)
    info = l.split(&#39;;&#39;)

    if info.length &amp;gt; 0
      song = Music.new
      song.id = info[0]
      song.title = info[1]
      song.artist = info[2]
      song.album = info[3]
      songs &amp;lt;&amp;lt; song
    end
  end
  f.close()
end

songs.each do |s|
  puts &amp;quot;#{s.artist} - #{s.title} - #{s.album}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>