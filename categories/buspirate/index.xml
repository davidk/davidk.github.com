<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Buspirate on open collector</title>
    <link>http://localhost:1313/categories/buspirate/</link>
    <description>Recent content in Buspirate on open collector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 May 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/buspirate/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Avrrrinator B</title>
      <link>http://localhost:1313/pages/avrb/</link>
      <pubDate>Sat, 17 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/pages/avrb/</guid>
      <description>

&lt;h2 id=&#34;silkscreen-text-bottom-squirrel-packing-a-ruby-laser-rod:e701188abab5b493e5915f1270430909&#34;&gt;Silkscreen text (bottom): &amp;ldquo;Squirrel Packing A Ruby Laser Rod&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;/avrb/images/avrrrinator_b_top.png&#34; alt=&#34;avrrrinator rev b&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;For the prior revision A release (single output, no logic level voltage translation), &lt;a href=&#34;http://open.konspyre.org/blog/2013/01/23/the-avrrrinator-revision-a/&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is revision B, adding two outputs behind buffers (which also offers logic level voltage shifting).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/avrb/images/avrrrinator_b_early.png&#34; alt=&#34;avrrrinator rev b programmin&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;With revision B, you can flash two attached projects (not at the same time!) without moving your cables around.&lt;/p&gt;

&lt;p&gt;This could be mis-construed to be more awesome than it is, so just to be clear: This isn&amp;rsquo;t a jig for mass-manufacturing, but for projects where it is nice to compare and contrast among two devices.&lt;/p&gt;

&lt;p&gt;Being an adapter for the Bus Pirate means getting features tailored for hacking too, like the ability to provide a small amount of power to connected projects (around 150mA):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Only available on some firmware revisions
# it seems, YMMV
$ screen /dev/ttyUSB0 115200
HiZ&amp;gt; m 9
DIO&amp;gt; W
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this thing does actually program AVR chips!&lt;/p&gt;

&lt;h2 id=&#34;b-side-what-are-the-avrdude-commands-i-can-t-remember-the-avrdude-commands:e701188abab5b493e5915f1270430909&#34;&gt;B-side: &amp;ldquo;What are the avrdude commands? I can&amp;rsquo;t remember the avrdude commands!&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Revision B includes a cheat sheet. Just flip the board over.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/avrb/images/avrrrinator_b_rear.png&#34; alt=&#34;reverse side avrb&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Here are the general commands listed if you want to cut and paste:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ avrdude -v -p attiny4313 -c buspirate
-P /dev/ttyUSB0 -U flash:w:blinky313.hex -x reset=cs

$ avrdude -v -p attiny85 -c buspirate
-P /dev/ttyUSB0 -U flash:w:blinky85.hex -x reset=aux
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Change &lt;code&gt;blinky313.hex&lt;/code&gt; or &lt;code&gt;blinky85.hex&lt;/code&gt; to the hex file for flashing/upload.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-x reset=cs&lt;/code&gt; will target the AVR attached to the &amp;ldquo;ISP CS&amp;rdquo; header, and &lt;code&gt;-x reset=aux&lt;/code&gt; will target the AVR attached to &amp;ldquo;ISP AUX&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/dev/ttyUSB0&lt;/code&gt; will need to be changed to reflect the location of your Bus Pirate.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See below for test runs of Avrrrinator Rev. B against an ATTiny4313 and ATTiny85.&lt;/p&gt;

&lt;h2 id=&#34;board-files:e701188abab5b493e5915f1270430909&#34;&gt;Board Files&lt;/h2&gt;

&lt;p&gt;Grab the board file here: &lt;a href=&#34;https://github.com/davidk/avrrrinator/tree/master/hardware/revB&#34;&gt;https://github.com/davidk/avrrrinator/tree/master/hardware/revB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keen observers (read: nobody) will notice that i&amp;rsquo;ve switched to KiCad for some recent projects. Revision B has been in the works for quite some time! I
may get around to porting this project over to KiCad one day, but it&amp;rsquo;ll likely involve a redo of all the routing and placement.&lt;/p&gt;

&lt;h3 id=&#34;something-to-keep-in-mind-this-board-has-small-parts-they-re-probably-a-sanity-hazard:e701188abab5b493e5915f1270430909&#34;&gt;Something to keep in mind: &lt;strong&gt;&lt;em&gt;This board has small parts. They&amp;rsquo;re probably a sanity hazard.&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;0603 (imperial) is considered by some to be just at the edge of being too difficult to do by hand/without solder
paste and vision assistance (microscope).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can probably get by on good leaded solder, some solder wick, and drag soldering (for the fine pitch ICs).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The board can be sent off for fabrication in several ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Take the board file, load it into Eagle and generate gerbers appropriate for your fabricator.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/davidk/avrrrinator/tree/master/hardware/revB&#34;&gt;Click through to the repository&lt;/a&gt; for the shared projects link at OSHPark. Order from there. (You can also upload the .brd file to OSHPark for fabrication.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While you wait, buy the parts on the &lt;a href=&#34;https://github.com/davidk/avrrrinator/tree/master/hardware/revB#bill-of-materials-for-revision-b&#34;&gt;Bill of Materials list&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;soldering:e701188abab5b493e5915f1270430909&#34;&gt;Soldering&lt;/h2&gt;

&lt;p&gt;For accurate placement information, see the &lt;a href=&#34;https://github.com/davidk/avrrrinator/tree/master/hardware/revB#bill-of-materials-for-revision-b&#34;&gt;Bill of Materials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The two surface mount switches are quite delicate. If using lead-free solder paste, be aware that the plastic switch may melt slightly before the solder reflows. Careful hot air application/hand soldering is suggested.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is best to start off with soldering the larger ICs, and end with the smaller 0603 resistors and capacitors. Only solder in the through-hole components when you are satisfied with the surface mount placement.&lt;/p&gt;

&lt;p&gt;Capacitors are all 0603 (imperial) 0.1ÂµF, so just solder them to everything C.
All resistors are 0603 (imperial), and 10k ohms.&lt;/p&gt;

&lt;h2 id=&#34;caveats-and-future-improvements:e701188abab5b493e5915f1270430909&#34;&gt;Caveats and future improvements&lt;/h2&gt;

&lt;p&gt;There are some things you should be aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is intended for programming AVR microcontrollers through an ISP interface, using avrdude. Boards like the Arduino have a 6-pin AVR ISP connector. Nothing else unless you use hacks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is very little in the way of protection. This board will happily hang around and get knocked in the head by some really bad things. Physically and electrically.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;While revision B has been tested in a limited capacity, this breakout is fairly new. A crazy combination of conditions $X $Y $Z will cause problems. So don&amp;rsquo;t pack this as your only programmer to Makerfaire, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Routing needs improvement. Everything works, it just isn&amp;rsquo;t pretty/nice enough.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The 10k resistors exist to set the state of the AVR side during the high impedance/tri-state stages. Further revisions (if done) will suppress the cross-coupling present more elegantly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This requires a version 3 Bus Pirate. Version 4 won&amp;rsquo;t work unless connections are jumpered across to the breakout (untested since I do not have a v4 Bus Pirate).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This also requires a supported Bus Pirate 3 firmware revision, as well as a recent avrdude version with Bus Pirate support. This board has been tested with avrdude version: 5.11.1, and Bus Pirate firmware version: 5.10 (r559). &lt;strong&gt;&lt;em&gt;If you have avrdude version 6, there is a &lt;em&gt;bug&lt;/em&gt; that prevents you from using more than one output (requires a separate posting).&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following change to &lt;code&gt;buspirate.c&lt;/code&gt; makes things work again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;Index: buspirate.c
===================================================================
--- buspirate.c (revision 1285)
+++ buspirate.c (working copy)
@@ -573,7 +573,7 @@

        /* 0b0100wxyz - Configure peripherals w=power, x=pull-ups/aux2, y=AUX, z=CS
         * we want power (0x48) and all reset pins high. */
-       PDATA(pgm)-&amp;gt;current_peripherals_config  = 0x48 | PDATA(pgm)-&amp;gt;reset;
+       PDATA(pgm)-&amp;gt;current_peripherals_config  = 0x48 | BP_RESET_CS | BP_RESET_AUX;
        buspirate_expect_bin_byte(pgm, PDATA(pgm)-&amp;gt;current_peripherals_config, 0x01);
        usleep(50000);  // sleep for 50ms after power up  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;licensing:e701188abab5b493e5915f1270430909&#34;&gt;Licensing&lt;/h2&gt;

&lt;p&gt;This project is Open Source Hardware. Feel free to open, examine, and make. Officially, revision B is &lt;a href=&#34;http://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;Creative Commons Zero&lt;/a&gt;. This is a public domain dedication with an added warranty disclaimer.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t stop you from not doing this (and I really don&amp;rsquo;t want to), but if you plan to make these and sell them, please spin off a cleverly named derivative. Just change the name, url, and add/remove fancy flourishes as desired. I&amp;rsquo;ll be happy to add you to a list of (hopefully improved) derivatives too. This is mostly because I lack the bandwidth to support projects.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgments:e701188abab5b493e5915f1270430909&#34;&gt;Acknowledgments&lt;/h2&gt;

&lt;p&gt;The following deserve thanks for various reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oshpark.com&#34;&gt;&lt;strong&gt;&lt;em&gt;OSHPark&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;: Purple all the things! It was very useful to forgo breadboarding at one point and just spin prototypes without abandon.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.johngineer.com/projects/bb313/&#34;&gt;&lt;strong&gt;&lt;em&gt;The BB313 board&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;: Many things are borrowed from this board. Parts: ISP connector, and pull jumper. The silkscreen for the ISP connector is borrowed from the BB313 &amp;ndash; it is more user-friendly than the standard &amp;ldquo;honeycomb&amp;rdquo; connector footprint. More importantly, these boards were used as test targets throughout the development of the Avrrrinator (both revision A and B).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://dangerousprototypes.com/docs/Bus_Pirate&#34;&gt;&lt;strong&gt;&lt;em&gt;Dangerous Prototypes&amp;rsquo; Bus Pirate&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, as well as its &lt;a href=&#34;http://dangerousprototypes.com/docs/Partlist&#34;&gt;&lt;strong&gt;&lt;em&gt;part list&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;http://dangerousprototypes.com/docs/Dangerous_Prototypes_Cadsoft_Eagle_parts_library&#34;&gt;&lt;strong&gt;&lt;em&gt;footprints&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; library. In particular, the power selection switch is borrowed directly from Dangerous Protoypes&amp;rsquo; list and footprint. The Bus Pirate connector is as well.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.nongnu.org/avrdude/&#34;&gt;&lt;strong&gt;&lt;em&gt;avrdude&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; support for the Bus Pirate and documentation in its man page.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;past:e701188abab5b493e5915f1270430909&#34;&gt;Past&lt;/h2&gt;

&lt;p&gt;Many spins ago, I decided to showcase what I was working on. Here is an earlier prototype of this revision, targeting two ATTiny MCUs for 24 hours. It was an entry into the Adafruit 6 second film festival contest:&lt;/p&gt;

&lt;iframe width=&#34;500&#34; height=&#34;480&#34; src=&#34;//www.youtube.com/embed/1nvUlqp4ISU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;test-output:e701188abab5b493e5915f1270430909&#34;&gt;Test output&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;avrdude -v -p attiny4313 -c buspirate -P /dev/ttyUSB0 -U flash:w:blinky313.hex -x reset=cs speed=7

avrdude: Version 5.11.1, compiled on Jun 18 2013 at 10:33:15
         Copyright (c) 2000-2005 Brian Dean, http://www.bdmicro.com/
         Copyright (c) 2007-2009 Joerg Wunsch

         System wide configuration file is &amp;quot;/etc/avrdude/avrdude.conf&amp;quot;
         User configuration file is &amp;quot;/home/davidk/.avrduderc&amp;quot;
         User configuration file does not exist or is not a regular file, skipping

         Using Port                    : /dev/ttyUSB0
         Using Programmer              : buspirate
         AVR Part                      : ATtiny4313
         Chip Erase delay              : 9000 us
         PAGEL                         : PD4
         BS2                           : PD6
         RESET disposition             : possible i/o
         RETRY pulse                   : SCK
         serial program mode           : yes
         parallel program mode         : yes
         Timeout                       : 200
         StabDelay                     : 100
         CmdexeDelay                   : 25
         SyncLoops                     : 32
         ByteDelay                     : 0
         PollIndex                     : 3
         PollValue                     : 0x53
         Memory Detail                 :

                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           eeprom        65     6     4    0 no        256    4      0  4000  4500 0xff 0xff
           flash         65     6    32    0 yes      4096   64     64  4500  4500 0xff 0xff
           signature      0     0     0    0 no          3    0      0     0     0 0x00 0x00
           lock           0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           lfuse          0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           hfuse          0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           efuse          0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           calibration    0     0     0    0 no          2    0      0     0     0 0x00 0x00

         Programmer Type : BusPirate
         Description     : The Bus Pirate

Detecting BusPirate...
avrdude: buspirate_readline(): #
avrdude: buspirate_readline(): RE
avrdude: buspirate_readline(): Bus Pirate v3.5
avrdude: buspirate_readline(): Firmware v6.1 r1676  Bootloader v4.4
avrdude: buspirate_readline(): DEVID:0x0447 REVID:0x3046 (24FJ64GA002 B8)
avrdude: buspirate_readline(): http://dangerousprototypes.com
avrdude: buspirate_readline(): HiZ&amp;gt;
**
BusPirate: using BINARY mode
BusPirate binmode version: 1
BusPirate SPI version: 1
avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.01s

avrdude: Device signature = 0x1e920d
avrdude: safemode: lfuse reads as 64
avrdude: safemode: hfuse reads as DF
avrdude: safemode: efuse reads as FF
avrdude: NOTE: FLASH memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file &amp;quot;blinky313.hex&amp;quot;
avrdude: input file blinky313.hex auto detected as Intel Hex
avrdude: writing flash (60 bytes):

Writing | ################################################## | 100% 0.19s

avrdude: 60 bytes of flash written
avrdude: verifying flash memory against blinky313.hex:
avrdude: load data flash data from input file blinky313.hex:
avrdude: input file blinky313.hex auto detected as Intel Hex
avrdude: input file blinky313.hex contains 60 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 0.18s

avrdude: verifying ...
avrdude: 60 bytes of flash verified

avrdude: safemode: lfuse reads as 64
avrdude: safemode: hfuse reads as DF
avrdude: safemode: efuse reads as FF
avrdude: safemode: Fuses OK
BusPirate is back in the text mode

avrdude done.  Thank you.

avrdude -v -p attiny85 -c buspirate -P /dev/ttyUSB0 -U flash:w:blinky45.hex -x reset=aux speed=7

avrdude: Version 5.11.1, compiled on Jun 18 2013 at 10:33:15
         Copyright (c) 2000-2005 Brian Dean, http://www.bdmicro.com/
         Copyright (c) 2007-2009 Joerg Wunsch

         System wide configuration file is &amp;quot;/etc/avrdude/avrdude.conf&amp;quot;
         User configuration file is &amp;quot;/home/davidk/.avrduderc&amp;quot;
         User configuration file does not exist or is not a regular file, skipping

         Using Port                    : /dev/ttyUSB0
         Using Programmer              : buspirate
         AVR Part                      : ATtiny85
         Chip Erase delay              : 4500 us
         PAGEL                         : P00
         BS2                           : P00
         RESET disposition             : possible i/o
         RETRY pulse                   : SCK
         serial program mode           : yes
         parallel program mode         : yes
         Timeout                       : 200
         StabDelay                     : 100
         CmdexeDelay                   : 25
         SyncLoops                     : 32
         ByteDelay                     : 0
         PollIndex                     : 3
         PollValue                     : 0x53
         Memory Detail                 :

                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           eeprom        65     6     4    0 no        512    4      0  4000  4500 0xff 0xff
           flash         65     6    32    0 yes      8192   64    128  4500  4500 0xff 0xff
           signature      0     0     0    0 no          3    0      0     0     0 0x00 0x00
           lock           0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           lfuse          0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           hfuse          0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           efuse          0     0     0    0 no          1    0      0  9000  9000 0x00 0x00
           calibration    0     0     0    0 no          2    0      0     0     0 0x00 0x00

         Programmer Type : BusPirate
         Description     : The Bus Pirate

Detecting BusPirate...
avrdude: buspirate_readline(): #
avrdude: buspirate_readline(): RE
avrdude: buspirate_readline(): Bus Pirate v3.5
avrdude: buspirate_readline(): Firmware v6.1 r1676  Bootloader v4.4
avrdude: buspirate_readline(): DEVID:0x0447 REVID:0x3046 (24FJ64GA002 B8)
avrdude: buspirate_readline(): http://dangerousprototypes.com
avrdude: buspirate_readline(): HiZ&amp;gt;
**
BusPirate: using BINARY mode
BusPirate binmode version: 1
BusPirate SPI version: 1
avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.01s

avrdude: Device signature = 0x1e930b
avrdude: safemode: lfuse reads as 62
avrdude: safemode: hfuse reads as DF
avrdude: safemode: efuse reads as FF
avrdude: NOTE: FLASH memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file &amp;quot;blinky45.hex&amp;quot;
avrdude: input file blinky45.hex auto detected as Intel Hex
avrdude: writing flash (18 bytes):

Writing | ################################################## | 100% 0.06s

avrdude: 18 bytes of flash written
avrdude: verifying flash memory against blinky45.hex:
avrdude: load data flash data from input file blinky45.hex:
avrdude: input file blinky45.hex auto detected as Intel Hex
avrdude: input file blinky45.hex contains 18 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 0.05s

avrdude: verifying ...
avrdude: 18 bytes of flash verified

avrdude: safemode: lfuse reads as 62
avrdude: safemode: hfuse reads as DF
avrdude: safemode: efuse reads as FF
avrdude: safemode: Fuses OK
BusPirate is back in the text mode

avrdude done.  Thank you.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop, blink and roll*</title>
      <link>http://localhost:1313/blog/2013-05-13-stop-blink-roll/</link>
      <pubDate>Mon, 13 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013-05-13-stop-blink-roll/</guid>
      <description>

&lt;p&gt;A little bit of the cat got out of the bag some time ago:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/assets/images/avrrrinator/6-seconds-avrrrinator.gif&#34; alt=&#34;6 seconds of AVR flashing&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re looking at ~24 hours of continuous AVR flashing compressed down into 6 seconds.&lt;/p&gt;

&lt;p&gt;While I won&amp;rsquo;t be releasing the connecting PCB just yet (i&amp;rsquo;m still beating down a few issues and refining the BOM), I thought it would be good to supply the scripts I used to do the actual time lapse since it was non-obvious from a &amp;ldquo;oh dear, the contest entry is due in &amp;lt;48 hours isn&amp;rsquo;t it..&amp;rdquo; point of view.&lt;/p&gt;

&lt;h2 id=&#34;parts-and-materials:c434917f357788de682d8fe989da3bc9&#34;&gt;Parts and Materials&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Teensy3&lt;/strong&gt;:  Attached to the system doing the programming&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSD1306&lt;/strong&gt;: OLED display showing how many times the AVR has been programmed&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bus Pirate 3&lt;/strong&gt;: Acting as an AVR programmer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avrrrinator Rev B&lt;/strong&gt;: Bus Pirate to 2x AVR ISP adapter (this is the super secret &amp;ldquo;prototype&amp;rdquo; I mentioned in the &lt;a href=&#34;http://www.youtube.com/watch?v=1nvUlqp4ISU&#34;&gt;YouTube post&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;BB313 boards&lt;/strong&gt;: Breakouts for easily attaching AVR ISP cables&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ATtiny4313&lt;/strong&gt;: tiny AVR for programming&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ATtiny85&lt;/strong&gt;: tiny AVR for programming&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Assorted LEDs&lt;/strong&gt;: Status indicators/Lighting&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Logitech C920 Webcam&lt;/strong&gt;: Takes all the pictures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;taking-a-picture:c434917f357788de682d8fe989da3bc9&#34;&gt;Taking a picture&lt;/h2&gt;

&lt;p&gt;The small bash script invoking the gstreamer toolchain (without reading the documentation this is pretty much magic) took on the duty of taking a picture every minute. It then copied everything out via rsync to another machine with tons of spare space.&lt;/p&gt;

&lt;p&gt;This is not properly done since my start time edged uncomfortably close to when I had to stop, edit and ship (24 hours later).&lt;/p&gt;

&lt;p&gt;Note that this constantly writes over the same file. It stops the local disk from being clogged up by continuous snapshots. It also does not check and do anything reasonable if the rsync transfer fails.. like move the file aside/retry.&lt;/p&gt;

&lt;p&gt;In my case, losing a few minutes worth of snapshots wasn&amp;rsquo;t a big deal for 24 hours compressed down to 6 seconds. I actually deleted quite a few frames before rendering out to video to eliminate periods of darkness (they show up as jarring sub-millisecond transitions to darkness).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

while true; do
gst-launch -e v4l2src ! video/x-raw-yuv,format=\(fourcc\)YUY2,width=1920,height=1080,framerate=5/1 \
! ffmpegcolorspace ! pngenc snapshot=true ! filesink location=&amp;quot;frame.png&amp;quot;

# Yup, this is talking to an actual rsyncd daemon on a NAS
RSYNC_PASSWORD=&amp;quot;super_secret&amp;quot; rsync -avP frame.png rsync://rsync@storage.somewhere/frame-`date &#39;+%s&#39;`.png

sleep 60;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;video-out:c434917f357788de682d8fe989da3bc9&#34;&gt;Video out&lt;/h2&gt;

&lt;p&gt;After all the frames were assembled, I manually went in and pruned a bunch that were completely dark due to the lights being off. Compressing the video down a bunch to 6 seconds took a bit of playing around, mostly with the framerate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mencoder &#39;mf://*.png&#39; -mf fps=145:type=png -ovc lavc -lavcopts vcodec=mpeg4:mbd=2:trell -oac copy -o ~/Desktop/output-yt.avi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the video quality kind of sucked, but I had to ship it.&lt;/p&gt;

&lt;p&gt;Here is the completed video:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/1nvUlqp4ISU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;code-doing-the-programming:c434917f357788de682d8fe989da3bc9&#34;&gt;Code doing the programming&lt;/h2&gt;

&lt;p&gt;This is the script that refreshes the display you see. It calls &lt;code&gt;avrdude&lt;/code&gt; to flash the AVRs and records the return code.&lt;/p&gt;

&lt;p&gt;If it is zero, then the success counter for the AVR is incremented.&lt;/p&gt;

&lt;p&gt;From there counts are then written to the serial port where the Teensy 3 can handle persisting the display and refreshing it with new results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# requires pyserial (pip install pyserial)
import subprocess
import serial

counter_4313 = 0
counter_85 = 0

failures_4313 = 0
failures_85 = 0

ser_port = serial.Serial(port=&#39;/dev/tty.usbmodem12341&#39;, baudrate=9600)

while True:
    try:
        ret_4313 = subprocess.check_call([&#39;avrdude&#39;, &#39;-v&#39;, &#39;-p&#39;, &#39;attiny4313&#39;, &#39;-c&#39;, &#39;buspirate&#39;, &#39;-P&#39;,
        &#39;/dev/tty.usbserial-AE01J4Q7&#39;, &#39;-U&#39;, &#39;flash:w:blinky313.hex&#39;, &#39;-x&#39;, &#39;reset=aux&#39;])
    except subprocess.CalledProcessError:
        ret_4313 = 1

    if ret_4313 == 0:
        print &amp;quot;ATtiny4313&amp;quot;
        counter_4313 += 1
    else:
        failures_4313 += 1

   # Report statistics to the LCD screen
    report = &amp;quot;313:%s\n\n85:%s&amp;quot; % (counter_4313, counter_85)
    ser_port.write(report)
    try:
        ret_85 = subprocess.check_call([&#39;avrdude&#39;, &#39;-v&#39;, &#39;-p&#39;, &#39;attiny85&#39;, &#39;-c&#39;, &#39;buspirate&#39;, &#39;-P&#39;,
        &#39;/dev/tty.usbserial-AE01J4Q7&#39;, &#39;-U&#39;, &#39;flash:w:blinky45.hex&#39;, &#39;-x&#39;, &#39;reset=cs&#39;])
    except subprocess.CalledProcessError:
        ret_85 = 1

    if ret_85 == 0:
        print &amp;quot;ATtiny85&amp;quot;
        counter_85 += 1
    else:
        failures_85 += 1

   # We do this twice to make it look more live
    report = &amp;quot;313:%s\n\n85:%s&amp;quot; % (counter_4313, counter_85)
    ser_port.write(report)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the Teensy 3, the data is received and pumped out to the display. Not the greatest code, but decent enough to run for 24 hours without much of a hiccup.&lt;/p&gt;

&lt;p&gt;Note that there are several small issues when using the SSD1306 library with the Teensy 3. I just stomped out the relevant sections after chasing down errors from the compiler (which were unrelated to SPI operation, and mostly due to i2c support).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-arduino&#34;&gt;/*********************************************************************
* Flash Counter!
* Teensy 3.0 attached to a 128x64 SPI-driven OLED display
* Vendor: Adafruit
*
* IF YOU GET COMPILE ERRORS (you likely will!)
* Stomp out the compile errors in Adafruit_SSD1306.cpp line by line
* and everything should be OK (most of them are i2c related).
*
*********************************************************************/
#include &amp;lt;Wire.h&amp;gt;
#include &amp;lt;Adafruit_GFX.h&amp;gt;
#include &amp;lt;Adafruit_SSD1306.h&amp;gt;

#define OLED_DC 11      // All pin numbers correspond to
#define OLED_CS 10  // the &#39;gray&#39; labels on the welcome to
#define OLED_CLK 14     // Teensy 3 card
#define OLED_MOSI 12    // SSD1306 labels this as: &amp;quot;Data&amp;quot;
#define OLED_RESET 9

Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

void setup() {
  Serial.begin(9600);
  pinMode(13, OUTPUT);

  // Display setup
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.setTextColor(WHITE,BLACK);

}

void loop() {

  // Persist the display until we have something to display
  if( Serial.available() &amp;gt; 0 ) {
    display.clearDisplay();
  }
  display.println(&amp;quot;AVR Program Count&amp;quot;);
  display.println();
  display.setTextSize(2);
  while ( Serial.available() &amp;gt; 0 ) {
    digitalWrite(13, HIGH);
    char c = Serial.read();

    if (c == &#39;\n&#39;) {
      display.println();
    } else {
      display.write(c);
    }
    digitalWrite(13, LOW);
  }
  display.display();

  delay(500);
  display.setTextSize(1);
  display.setCursor(0,0);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course, blink programs. The ATtiny4313 and &lt;a href=&#34;https://gist.github.com/davidk/4555334&#34;&gt;ATtiny85&lt;/a&gt; each had their own. They&amp;rsquo;re pretty generic, (the one for the 4313 is from the BB313 website).&lt;/p&gt;

&lt;p&gt;cheers (and drink, if thats your thing)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3D Printed Bus Pirate v3.6 Case (DP6037)</title>
      <link>http://localhost:1313/blog/2012-12-31-3d-printed-bus-pirate-case/</link>
      <pubDate>Mon, 31 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012-12-31-3d-printed-bus-pirate-case/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/assets/images/bus-pirate-cases/bus_pirate_case_v2-front-mirrored-blue-improved.png&#34; alt=&#34;Bus Pirate Case, Translucent Blue, Improved&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Source files and general instructions for printing can be found &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Bus Pirate is a pretty fantastic device for sniffing around and working with new circuits. It can even &lt;a href=&#34;http://dangerousprototypes.com/docs/Bus_Pirate_AVR_Programming&#34;&gt;act as an AVR programmer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After using one to fiddle with a few circuits, a case became necessary after seeing its value. While there are cases that can be purchased[1], a 3D printer was laying around waiting to be used.&lt;/p&gt;

&lt;p&gt;Finding only a &lt;a href=&#34;http://www.thingiverse.com/thing:33517&#34;&gt;case outline&lt;/a&gt; (which proved to be extremely useful as a jumping off point) on Thingiverse, one needed to be made for the newer Bus Pirate.&lt;/p&gt;

&lt;p&gt;After several hours (mostly spent re-calibrating the 3D printer, untangling filament, and playing musical notes with the timing belts), the printer popped out several iterations of cases.&lt;/p&gt;

&lt;p&gt;The first few worked well, but were dependent on PLA &amp;lsquo;rods and spikes&amp;rsquo; (scrap filament cut and heated on a hotbed to straighten) and press-fitting to hold the top and bottom halves together. The USB header was also unexposed, which caused leveling issues (since it was higher than the rest of the board).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/assets/images/bus-pirate-cases/bus-pirate-case-v1.png&#34; alt=&#34;Printed Bus Pirate Case, Reject&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Going forward with several revisions, and many rejects later (about 12!), a decent case started appearing. Instead of PLA rods, a few 8mm long M3 machine screws and M3 hex nuts were used. They&amp;rsquo;re not very common, but the M3s seem to fit rather well while providing a good degree of stability.&lt;/p&gt;

&lt;p&gt;The assembly order from the bottom: M3 screw, bottom plate, PCB, hex nut, top plate.&lt;/p&gt;

&lt;p&gt;While the top looks unsecured, it must actually be screwed/threaded in from the bottom with a decent amount of force.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/assets/images/bus-pirate-cases/bus-pirate-case-v2-front.png&#34; alt=&#34;Printed Bus Pirate Case, Front&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Polyimide tape was used on the back to protect the pins from being shorted out. The reason for not covering them in CAD is because they can be &lt;a href=&#34;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=N60WSQc-G_8#t=416s&#34;&gt;useful to probe&lt;/a&gt; with a multimeter at times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/assets/images/bus-pirate-cases/bus-pirate-case-v2-back.png&#34; alt=&#34;Printed Bus Pirate Case, Back&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Files are posted &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037&#34;&gt;here&lt;/a&gt; (CC-BY-SA; via original author), but may change in the future if I ever get around to beating the thing into a different shape.&lt;/p&gt;

&lt;p&gt;If you have an idea for a change, or can design a better one go for it!&lt;/p&gt;

&lt;h2 id=&#34;updates-errata:6c86a18651dceea50e592c955548af99&#34;&gt;Updates &amp;amp; Errata&lt;/h2&gt;

&lt;p&gt;1-1-13: For many printers with a perfectly flat print bed (borosilicate glass, metal, etc), it may be advantageous to mirror the output on one axis so that the top gets printed perfectly flat.&lt;/p&gt;

&lt;p&gt;With a borosilicate glass bed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/assets/images/bus-pirate-cases/bus-pirate-case-v2-front-mirrored.png&#34; alt=&#34;Bus Pirate Case, mirrored shiny front&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The exported STL file has been added to the &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037&#34;&gt;GitHub repository&lt;/a&gt;. Look for &lt;a href=&#34;https://github.com/davidk/3D-Printable-BusPirate-DP6037/blob/master/dp6037-top-axis-flipped.stl?raw=true&#34;&gt;dp6037-top-axis-flipped.stl&lt;/a&gt; when grabbing it (or click that link).&lt;/p&gt;

&lt;p&gt;1-2-13: Yellow? Who prints stuff in yellow? Don&amp;rsquo;t you have blue?&lt;/p&gt;

&lt;p&gt;After a bit of recalibrating, this is what the case looks like in translucent blue. Not very high quality, but passable:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/assets/images/bus-pirate-cases/bus-pirate-case-v2-front-mirrored-blue.png&#34; alt=&#34;Bus Pirate Case, Translucent Blue&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;1-3-13: Here is a better front panel (printed after mending the Z-axis into alignment), which will probably be the last update (in this series of days).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/assets/images/bus-pirate-cases/bus_pirate_case_v2-front-mirrored-blue-improved.png&#34; alt=&#34;Bus Pirate Case, Translucent Blue, Improved&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;1-4-13: Added a link to source files at top and shortened/corrected more text to sound less silly.&lt;/p&gt;

&lt;h2 id=&#34;notes-references:6c86a18651dceea50e592c955548af99&#34;&gt;Notes &amp;amp; References&lt;/h2&gt;

&lt;p&gt;[1] Note that buying an acrylic case is really the way to go. They &lt;a href=&#34;http://www.seeedstudio.com/depot/bus-pirate-v36-acrylic-case-v1-dp6037-p-1229.html?cPath=178_184&#34;&gt;sell for about $3&lt;/a&gt;).. but if you have a 3D printer, it probably needs to earn its keep anyway.&lt;/p&gt;

&lt;h2 id=&#34;thanks-resources:6c86a18651dceea50e592c955548af99&#34;&gt;Thanks &amp;amp; Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Thanks to &lt;a href=&#34;http://www.thingiverse.com/thing:33517&#34;&gt;XQL for creating the model, and publishing it on Thingiverse&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want to purchase your own Bus Pirate, plenty of vendors sell them. The particular one I bought was from Adafruit. Check out their &lt;a href=&#34;https://www.adafruit.com/products/237&#34;&gt;Bus Pirates here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cheers!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>